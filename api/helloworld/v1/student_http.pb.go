// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.3
// - protoc             v5.29.3
// source: helloworld/v1/student.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationStudentActivityGet = "/helloworld.v1.Student/ActivityGet"
const OperationStudentAddStudent = "/helloworld.v1.Student/AddStudent"
const OperationStudentGetStudent = "/helloworld.v1.Student/GetStudent"
const OperationStudentListStudents = "/helloworld.v1.Student/ListStudents"
const OperationStudentMessageSend = "/helloworld.v1.Student/MessageSend"
const OperationStudentTimeGet = "/helloworld.v1.Student/TimeGet"

type StudentHTTPServer interface {
	ActivityGet(context.Context, *InvitationRequest) (*InvitationResponse, error)
	AddStudent(context.Context, *AddStudentRequest) (*AddStudentResponse, error)
	GetStudent(context.Context, *GetStudentRequest) (*GetStudentRespose, error)
	ListStudents(context.Context, *ListStudentsRequest) (*ListStudentsResponse, error)
	MessageSend(context.Context, *InvitationRequest) (*InvitationResponse, error)
	TimeGet(context.Context, *InvitationRequest) (*InvitationResponse, error)
}

func RegisterStudentHTTPServer(s *http.Server, srv StudentHTTPServer) {
	r := s.Route("/")
	r.POST("/students", _Student_AddStudent0_HTTP_Handler(srv))
	r.GET("/students/{name}", _Student_GetStudent0_HTTP_Handler(srv))
	r.GET("/students", _Student_ListStudents0_HTTP_Handler(srv))
	r.GET("/msgSend/test", _Student_MessageSend0_HTTP_Handler(srv))
	r.GET("/activity/get", _Student_ActivityGet0_HTTP_Handler(srv))
	r.GET("/time/get", _Student_TimeGet0_HTTP_Handler(srv))
}

func _Student_AddStudent0_HTTP_Handler(srv StudentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddStudentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStudentAddStudent)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddStudent(ctx, req.(*AddStudentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddStudentResponse)
		return ctx.Result(200, reply)
	}
}

func _Student_GetStudent0_HTTP_Handler(srv StudentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetStudentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStudentGetStudent)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetStudent(ctx, req.(*GetStudentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetStudentRespose)
		return ctx.Result(200, reply)
	}
}

func _Student_ListStudents0_HTTP_Handler(srv StudentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListStudentsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStudentListStudents)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListStudents(ctx, req.(*ListStudentsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListStudentsResponse)
		return ctx.Result(200, reply)
	}
}

func _Student_MessageSend0_HTTP_Handler(srv StudentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in InvitationRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStudentMessageSend)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MessageSend(ctx, req.(*InvitationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*InvitationResponse)
		return ctx.Result(200, reply)
	}
}

func _Student_ActivityGet0_HTTP_Handler(srv StudentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in InvitationRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStudentActivityGet)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ActivityGet(ctx, req.(*InvitationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*InvitationResponse)
		return ctx.Result(200, reply)
	}
}

func _Student_TimeGet0_HTTP_Handler(srv StudentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in InvitationRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStudentTimeGet)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.TimeGet(ctx, req.(*InvitationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*InvitationResponse)
		return ctx.Result(200, reply)
	}
}

type StudentHTTPClient interface {
	ActivityGet(ctx context.Context, req *InvitationRequest, opts ...http.CallOption) (rsp *InvitationResponse, err error)
	AddStudent(ctx context.Context, req *AddStudentRequest, opts ...http.CallOption) (rsp *AddStudentResponse, err error)
	GetStudent(ctx context.Context, req *GetStudentRequest, opts ...http.CallOption) (rsp *GetStudentRespose, err error)
	ListStudents(ctx context.Context, req *ListStudentsRequest, opts ...http.CallOption) (rsp *ListStudentsResponse, err error)
	MessageSend(ctx context.Context, req *InvitationRequest, opts ...http.CallOption) (rsp *InvitationResponse, err error)
	TimeGet(ctx context.Context, req *InvitationRequest, opts ...http.CallOption) (rsp *InvitationResponse, err error)
}

type StudentHTTPClientImpl struct {
	cc *http.Client
}

func NewStudentHTTPClient(client *http.Client) StudentHTTPClient {
	return &StudentHTTPClientImpl{client}
}

func (c *StudentHTTPClientImpl) ActivityGet(ctx context.Context, in *InvitationRequest, opts ...http.CallOption) (*InvitationResponse, error) {
	var out InvitationResponse
	pattern := "/activity/get"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationStudentActivityGet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *StudentHTTPClientImpl) AddStudent(ctx context.Context, in *AddStudentRequest, opts ...http.CallOption) (*AddStudentResponse, error) {
	var out AddStudentResponse
	pattern := "/students"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationStudentAddStudent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *StudentHTTPClientImpl) GetStudent(ctx context.Context, in *GetStudentRequest, opts ...http.CallOption) (*GetStudentRespose, error) {
	var out GetStudentRespose
	pattern := "/students/{name}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationStudentGetStudent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *StudentHTTPClientImpl) ListStudents(ctx context.Context, in *ListStudentsRequest, opts ...http.CallOption) (*ListStudentsResponse, error) {
	var out ListStudentsResponse
	pattern := "/students"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationStudentListStudents))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *StudentHTTPClientImpl) MessageSend(ctx context.Context, in *InvitationRequest, opts ...http.CallOption) (*InvitationResponse, error) {
	var out InvitationResponse
	pattern := "/msgSend/test"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationStudentMessageSend))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *StudentHTTPClientImpl) TimeGet(ctx context.Context, in *InvitationRequest, opts ...http.CallOption) (*InvitationResponse, error) {
	var out InvitationResponse
	pattern := "/time/get"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationStudentTimeGet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
