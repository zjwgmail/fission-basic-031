// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.3
// - protoc             v5.29.3
// source: fission/v1/cdk.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationCDKCDKTest = "/fission.v1.CDK/CDKTest"
const OperationCDKGetCDK = "/fission.v1.CDK/GetCDK"
const OperationCDKImportCDK = "/fission.v1.CDK/ImportCDK"

type CDKHTTPServer interface {
	CDKTest(context.Context, *CDKTestRequest) (*CDKTestResponse, error)
	GetCDK(context.Context, *GetCDKRequest) (*GetCDKResponse, error)
	ImportCDK(context.Context, *ImportCDKRequest) (*ImportCDKResponse, error)
}

func RegisterCDKHTTPServer(s *http.Server, srv CDKHTTPServer) {
	r := s.Route("/")
	r.POST("/events/mlbb25031gateway/activity/cdk", _CDK_GetCDK0_HTTP_Handler(srv))
	r.POST("/events/mlbb25031gateway/activity/import/data", _CDK_ImportCDK0_HTTP_Handler(srv))
	r.GET("/cdk/test", _CDK_CDKTest0_HTTP_Handler(srv))
}

func _CDK_GetCDK0_HTTP_Handler(srv CDKHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCDKRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCDKGetCDK)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCDK(ctx, req.(*GetCDKRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCDKResponse)
		return ctx.Result(200, reply)
	}
}

func _CDK_ImportCDK0_HTTP_Handler(srv CDKHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ImportCDKRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCDKImportCDK)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ImportCDK(ctx, req.(*ImportCDKRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ImportCDKResponse)
		return ctx.Result(200, reply)
	}
}

func _CDK_CDKTest0_HTTP_Handler(srv CDKHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CDKTestRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCDKCDKTest)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CDKTest(ctx, req.(*CDKTestRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CDKTestResponse)
		return ctx.Result(200, reply)
	}
}

type CDKHTTPClient interface {
	CDKTest(ctx context.Context, req *CDKTestRequest, opts ...http.CallOption) (rsp *CDKTestResponse, err error)
	GetCDK(ctx context.Context, req *GetCDKRequest, opts ...http.CallOption) (rsp *GetCDKResponse, err error)
	ImportCDK(ctx context.Context, req *ImportCDKRequest, opts ...http.CallOption) (rsp *ImportCDKResponse, err error)
}

type CDKHTTPClientImpl struct {
	cc *http.Client
}

func NewCDKHTTPClient(client *http.Client) CDKHTTPClient {
	return &CDKHTTPClientImpl{client}
}

func (c *CDKHTTPClientImpl) CDKTest(ctx context.Context, in *CDKTestRequest, opts ...http.CallOption) (*CDKTestResponse, error) {
	var out CDKTestResponse
	pattern := "/cdk/test"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCDKCDKTest))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CDKHTTPClientImpl) GetCDK(ctx context.Context, in *GetCDKRequest, opts ...http.CallOption) (*GetCDKResponse, error) {
	var out GetCDKResponse
	pattern := "/events/mlbb25031gateway/activity/cdk"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCDKGetCDK))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CDKHTTPClientImpl) ImportCDK(ctx context.Context, in *ImportCDKRequest, opts ...http.CallOption) (*ImportCDKResponse, error) {
	var out ImportCDKResponse
	pattern := "/events/mlbb25031gateway/activity/import/data"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCDKImportCDK))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
