// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.3
// - protoc             v5.29.3
// source: fission/v1/image.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationImageGenerateImageGenerate = "/fission.v1.ImageGenerate/ImageGenerate"
const OperationImageGenerateImagedDowngrade = "/fission.v1.ImageGenerate/ImagedDowngrade"

type ImageGenerateHTTPServer interface {
	ImageGenerate(context.Context, *SynthesisParamRequest) (*SynthesisResponse, error)
	ImagedDowngrade(context.Context, *SynthesisParamRequest) (*SynthesisResponse, error)
}

func RegisterImageGenerateHTTPServer(s *http.Server, srv ImageGenerateHTTPServer) {
	r := s.Route("/")
	r.POST("/events/mlbb25031gateway/activity/generateImages", _ImageGenerate_ImageGenerate0_HTTP_Handler(srv))
	r.POST("/events/mlbb25031gateway/activity/imagedDowngrade", _ImageGenerate_ImagedDowngrade0_HTTP_Handler(srv))
}

func _ImageGenerate_ImageGenerate0_HTTP_Handler(srv ImageGenerateHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SynthesisParamRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationImageGenerateImageGenerate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ImageGenerate(ctx, req.(*SynthesisParamRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SynthesisResponse)
		return ctx.Result(200, reply)
	}
}

func _ImageGenerate_ImagedDowngrade0_HTTP_Handler(srv ImageGenerateHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SynthesisParamRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationImageGenerateImagedDowngrade)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ImagedDowngrade(ctx, req.(*SynthesisParamRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SynthesisResponse)
		return ctx.Result(200, reply)
	}
}

type ImageGenerateHTTPClient interface {
	ImageGenerate(ctx context.Context, req *SynthesisParamRequest, opts ...http.CallOption) (rsp *SynthesisResponse, err error)
	ImagedDowngrade(ctx context.Context, req *SynthesisParamRequest, opts ...http.CallOption) (rsp *SynthesisResponse, err error)
}

type ImageGenerateHTTPClientImpl struct {
	cc *http.Client
}

func NewImageGenerateHTTPClient(client *http.Client) ImageGenerateHTTPClient {
	return &ImageGenerateHTTPClientImpl{client}
}

func (c *ImageGenerateHTTPClientImpl) ImageGenerate(ctx context.Context, in *SynthesisParamRequest, opts ...http.CallOption) (*SynthesisResponse, error) {
	var out SynthesisResponse
	pattern := "/events/mlbb25031gateway/activity/generateImages"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationImageGenerateImageGenerate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ImageGenerateHTTPClientImpl) ImagedDowngrade(ctx context.Context, in *SynthesisParamRequest, opts ...http.CallOption) (*SynthesisResponse, error) {
	var out SynthesisResponse
	pattern := "/events/mlbb25031gateway/activity/imagedDowngrade"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationImageGenerateImagedDowngrade))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
