// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: fission/v1/help_code.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HelpCode_PreheatHelpCode_FullMethodName = "/helloworld.v1.HelpCode/PreheatHelpCode"
	HelpCode_RepairHelpCode_FullMethodName  = "/helloworld.v1.HelpCode/RepairHelpCode"
	HelpCode_HCTest_FullMethodName          = "/helloworld.v1.HelpCode/HCTest"
	HelpCode_GetActivityInfo_FullMethodName = "/helloworld.v1.HelpCode/GetActivityInfo"
)

// HelpCodeClient is the client API for HelpCode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HelpCodeClient interface {
	PreheatHelpCode(ctx context.Context, in *PreheatHelpCodeRequest, opts ...grpc.CallOption) (*PreheatHelpCodeResponse, error)
	RepairHelpCode(ctx context.Context, in *RepairHelpCodeRequest, opts ...grpc.CallOption) (*RepairHelpCodeResponse, error)
	HCTest(ctx context.Context, in *HCTestRequest, opts ...grpc.CallOption) (*HCTestResponse, error)
	GetActivityInfo(ctx context.Context, in *GetActivityInfoRequest, opts ...grpc.CallOption) (*GetActivityInfoResponse, error)
}

type helpCodeClient struct {
	cc grpc.ClientConnInterface
}

func NewHelpCodeClient(cc grpc.ClientConnInterface) HelpCodeClient {
	return &helpCodeClient{cc}
}

func (c *helpCodeClient) PreheatHelpCode(ctx context.Context, in *PreheatHelpCodeRequest, opts ...grpc.CallOption) (*PreheatHelpCodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PreheatHelpCodeResponse)
	err := c.cc.Invoke(ctx, HelpCode_PreheatHelpCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helpCodeClient) RepairHelpCode(ctx context.Context, in *RepairHelpCodeRequest, opts ...grpc.CallOption) (*RepairHelpCodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RepairHelpCodeResponse)
	err := c.cc.Invoke(ctx, HelpCode_RepairHelpCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helpCodeClient) HCTest(ctx context.Context, in *HCTestRequest, opts ...grpc.CallOption) (*HCTestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HCTestResponse)
	err := c.cc.Invoke(ctx, HelpCode_HCTest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helpCodeClient) GetActivityInfo(ctx context.Context, in *GetActivityInfoRequest, opts ...grpc.CallOption) (*GetActivityInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetActivityInfoResponse)
	err := c.cc.Invoke(ctx, HelpCode_GetActivityInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HelpCodeServer is the server API for HelpCode service.
// All implementations must embed UnimplementedHelpCodeServer
// for forward compatibility.
type HelpCodeServer interface {
	PreheatHelpCode(context.Context, *PreheatHelpCodeRequest) (*PreheatHelpCodeResponse, error)
	RepairHelpCode(context.Context, *RepairHelpCodeRequest) (*RepairHelpCodeResponse, error)
	HCTest(context.Context, *HCTestRequest) (*HCTestResponse, error)
	GetActivityInfo(context.Context, *GetActivityInfoRequest) (*GetActivityInfoResponse, error)
	mustEmbedUnimplementedHelpCodeServer()
}

// UnimplementedHelpCodeServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHelpCodeServer struct{}

func (UnimplementedHelpCodeServer) PreheatHelpCode(context.Context, *PreheatHelpCodeRequest) (*PreheatHelpCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreheatHelpCode not implemented")
}
func (UnimplementedHelpCodeServer) RepairHelpCode(context.Context, *RepairHelpCodeRequest) (*RepairHelpCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepairHelpCode not implemented")
}
func (UnimplementedHelpCodeServer) HCTest(context.Context, *HCTestRequest) (*HCTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HCTest not implemented")
}
func (UnimplementedHelpCodeServer) GetActivityInfo(context.Context, *GetActivityInfoRequest) (*GetActivityInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActivityInfo not implemented")
}
func (UnimplementedHelpCodeServer) mustEmbedUnimplementedHelpCodeServer() {}
func (UnimplementedHelpCodeServer) testEmbeddedByValue()                  {}

// UnsafeHelpCodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HelpCodeServer will
// result in compilation errors.
type UnsafeHelpCodeServer interface {
	mustEmbedUnimplementedHelpCodeServer()
}

func RegisterHelpCodeServer(s grpc.ServiceRegistrar, srv HelpCodeServer) {
	// If the following call pancis, it indicates UnimplementedHelpCodeServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HelpCode_ServiceDesc, srv)
}

func _HelpCode_PreheatHelpCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreheatHelpCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelpCodeServer).PreheatHelpCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelpCode_PreheatHelpCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelpCodeServer).PreheatHelpCode(ctx, req.(*PreheatHelpCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelpCode_RepairHelpCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepairHelpCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelpCodeServer).RepairHelpCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelpCode_RepairHelpCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelpCodeServer).RepairHelpCode(ctx, req.(*RepairHelpCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelpCode_HCTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HCTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelpCodeServer).HCTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelpCode_HCTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelpCodeServer).HCTest(ctx, req.(*HCTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelpCode_GetActivityInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActivityInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelpCodeServer).GetActivityInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelpCode_GetActivityInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelpCodeServer).GetActivityInfo(ctx, req.(*GetActivityInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HelpCode_ServiceDesc is the grpc.ServiceDesc for HelpCode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HelpCode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.v1.HelpCode",
	HandlerType: (*HelpCodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PreheatHelpCode",
			Handler:    _HelpCode_PreheatHelpCode_Handler,
		},
		{
			MethodName: "RepairHelpCode",
			Handler:    _HelpCode_RepairHelpCode_Handler,
		},
		{
			MethodName: "HCTest",
			Handler:    _HelpCode_HCTest_Handler,
		},
		{
			MethodName: "GetActivityInfo",
			Handler:    _HelpCode_GetActivityInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fission/v1/help_code.proto",
}
