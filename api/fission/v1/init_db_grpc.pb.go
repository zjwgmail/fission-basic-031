// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: fission/v1/init_db.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InitDB_InitDB_FullMethodName   = "/fission.v1.InitDB/InitDB"
	InitDB_QuerySql_FullMethodName = "/fission.v1.InitDB/QuerySql"
	InitDB_ExeSql_FullMethodName   = "/fission.v1.InitDB/ExeSql"
)

// InitDBClient is the client API for InitDB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InitDBClient interface {
	InitDB(ctx context.Context, in *InitDBRequest, opts ...grpc.CallOption) (*InitDBRequestResponse, error)
	QuerySql(ctx context.Context, in *QuerySqlRequest, opts ...grpc.CallOption) (*QuerySqlResponse, error)
	ExeSql(ctx context.Context, in *ExeSqlRequest, opts ...grpc.CallOption) (*ExeSqlResponse, error)
}

type initDBClient struct {
	cc grpc.ClientConnInterface
}

func NewInitDBClient(cc grpc.ClientConnInterface) InitDBClient {
	return &initDBClient{cc}
}

func (c *initDBClient) InitDB(ctx context.Context, in *InitDBRequest, opts ...grpc.CallOption) (*InitDBRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitDBRequestResponse)
	err := c.cc.Invoke(ctx, InitDB_InitDB_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *initDBClient) QuerySql(ctx context.Context, in *QuerySqlRequest, opts ...grpc.CallOption) (*QuerySqlResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuerySqlResponse)
	err := c.cc.Invoke(ctx, InitDB_QuerySql_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *initDBClient) ExeSql(ctx context.Context, in *ExeSqlRequest, opts ...grpc.CallOption) (*ExeSqlResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExeSqlResponse)
	err := c.cc.Invoke(ctx, InitDB_ExeSql_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InitDBServer is the server API for InitDB service.
// All implementations must embed UnimplementedInitDBServer
// for forward compatibility.
type InitDBServer interface {
	InitDB(context.Context, *InitDBRequest) (*InitDBRequestResponse, error)
	QuerySql(context.Context, *QuerySqlRequest) (*QuerySqlResponse, error)
	ExeSql(context.Context, *ExeSqlRequest) (*ExeSqlResponse, error)
	mustEmbedUnimplementedInitDBServer()
}

// UnimplementedInitDBServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInitDBServer struct{}

func (UnimplementedInitDBServer) InitDB(context.Context, *InitDBRequest) (*InitDBRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitDB not implemented")
}
func (UnimplementedInitDBServer) QuerySql(context.Context, *QuerySqlRequest) (*QuerySqlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySql not implemented")
}
func (UnimplementedInitDBServer) ExeSql(context.Context, *ExeSqlRequest) (*ExeSqlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExeSql not implemented")
}
func (UnimplementedInitDBServer) mustEmbedUnimplementedInitDBServer() {}
func (UnimplementedInitDBServer) testEmbeddedByValue()                {}

// UnsafeInitDBServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InitDBServer will
// result in compilation errors.
type UnsafeInitDBServer interface {
	mustEmbedUnimplementedInitDBServer()
}

func RegisterInitDBServer(s grpc.ServiceRegistrar, srv InitDBServer) {
	// If the following call pancis, it indicates UnimplementedInitDBServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InitDB_ServiceDesc, srv)
}

func _InitDB_InitDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitDBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InitDBServer).InitDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InitDB_InitDB_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InitDBServer).InitDB(ctx, req.(*InitDBRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InitDB_QuerySql_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySqlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InitDBServer).QuerySql(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InitDB_QuerySql_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InitDBServer).QuerySql(ctx, req.(*QuerySqlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InitDB_ExeSql_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExeSqlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InitDBServer).ExeSql(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InitDB_ExeSql_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InitDBServer).ExeSql(ctx, req.(*ExeSqlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InitDB_ServiceDesc is the grpc.ServiceDesc for InitDB service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InitDB_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fission.v1.InitDB",
	HandlerType: (*InitDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitDB",
			Handler:    _InitDB_InitDB_Handler,
		},
		{
			MethodName: "QuerySql",
			Handler:    _InitDB_QuerySql_Handler,
		},
		{
			MethodName: "ExeSql",
			Handler:    _InitDB_ExeSql_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fission/v1/init_db.proto",
}
