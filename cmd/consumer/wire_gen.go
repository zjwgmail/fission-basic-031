// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"fission-basic/internal/biz"
	"fission-basic/internal/conf"
	"fission-basic/internal/data"
	"fission-basic/internal/pkg/feishu"
	"fission-basic/internal/pkg/queue"
	"fission-basic/internal/pkg/redis"
	"fission-basic/internal/server"
	"fission-basic/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(bootstrap *conf.Bootstrap, confServer *conf.Server, confData *conf.Data, business *conf.Business, logger log.Logger) (*kratos.App, func(), error) {
	clusterClient := redis.NewRedisClient(confData)
	official := queue.NewOfficialQueue(clusterClient, confData)
	unOfficial := queue.NewUnOfficialQueue(clusterClient, confData)
	renewMsg := queue.NewRenewMsg(clusterClient, confData)
	develop := feishu.NewDevelop(confData, logger)
	dataData, cleanup, err := data.NewData(confData, logger)
	if err != nil {
		return nil, nil, err
	}
	rally := data.NewRally(dataData, logger)
	officialRallyRepo := data.NewOfficialRally(rally)
	waMsgRetryRepo := data.NewWaMsgRetry(dataData, logger)
	redisService := redis.NewRedisService(clusterClient, logger, confData, business)
	waMsgSendRepo := data.NewWaMsgSend(dataData, redisService, business, logger)
	imageGenerate := biz.NewImageGenerate(business, logger, redisService)
	waMsgService := biz.NewWaMsgService(confData, logger, bootstrap, waMsgRetryRepo, waMsgSendRepo, redisService, imageGenerate)
	activityInfoRepo := data.NewActivityInfo(dataData, logger, redisService)
	activityInfoUsecase := biz.NewActivityInfoUsecase(activityInfoRepo, logger, bootstrap)
	officialRallyUsecase := biz.NewOfficialRallyUsecase(confData, business, officialRallyRepo, official, logger, waMsgService, activityInfoUsecase)
	unOfficialRallyRepo := data.NewUnOfficialRally(rally)
	userInfoRepo := data.NewUserInfo(dataData, logger)
	systemConfigRepo := data.NewSystemConfig(dataData, logger)
	cdkUsecase := biz.NewCdkUsecase(userInfoRepo, systemConfigRepo, redisService, business, logger)
	unOfficialRallyUsecase := biz.NewUnOfficialRallyUsecase(confData, unOfficialRallyRepo, waMsgService, cdkUsecase, logger, userInfoRepo, activityInfoUsecase, business, clusterClient, unOfficial)
	msgRepo := data.NewMsg(dataData, logger)
	waUserScoreRepo := data.NewWaUserScore(dataData, logger)
	pushEventSendMessageRepo := data.NewPushEventSendMessage(dataData, logger)
	callMsg := queue.NewCallMsg(clusterClient, confData)
	msgUsecase := biz.NewMsgUsecase(confData, logger, msgRepo, waUserScoreRepo, pushEventSendMessageRepo, redisService, callMsg)
	repeatHelp := queue.NewRepeatHelp(clusterClient, confData)
	gw := queue.NewGW(clusterClient, confData)
	gwRecall := queue.NewGWRecal(clusterClient, confData)
	gwUnknown := queue.NewGWUnknown(clusterClient, confData)
	feishuReportRepo := data.NewFeishuReport(dataData, logger)
	helpCodeRepo := data.NewHelpCode(dataData, logger)
	feishuFeishu := feishu.NewFeishu(confData, logger)
	feishuReportJob := biz.NewFeishuReportJob(systemConfigRepo, userInfoRepo, waMsgSendRepo, feishuReportRepo, helpCodeRepo, feishuFeishu, redisService, logger, business)
	helpCodeUsecase := biz.NewHelpCodeUsecase(helpCodeRepo, logger)
	helpCodeService := service.NewHelpCodeService(confData, business, logger, feishuReportJob, helpCodeUsecase, feishuFeishu, activityInfoUsecase, redisService)
	userRemindRepo := data.NewUserRemind(dataData, logger)
	resendJob := biz.NewResendJob(waMsgSendRepo, userRemindRepo, activityInfoRepo, logger, bootstrap, redisService, waMsgService)
	resendRetryJob := biz.NewResendRetryJob(waMsgRetryRepo, userRemindRepo, activityInfoRepo, logger, bootstrap, redisService, waMsgService)
	nxCloudRepo := data.NewNXCloud(dataData, logger)
	nxCloudUsecase := biz.NewNxCLoudUsecase(nxCloudRepo, msgRepo, logger, official, unOfficial, renewMsg, callMsg, repeatHelp, waMsgService, waMsgSendRepo, officialRallyRepo, business, redisService)
	nxCloudService, cleanup2 := service.NewNxCloudService(nxCloudUsecase, logger, confData, business, redisService, gw, gwRecall, gwUnknown, activityInfoUsecase)
	taskService := service.NewTaskService(confData, official, unOfficial, renewMsg, develop, officialRallyUsecase, unOfficialRallyUsecase, msgUsecase, callMsg, repeatHelp, gw, gwRecall, gwUnknown, helpCodeService, logger, waMsgService, userInfoRepo, clusterClient, resendJob, resendRetryJob, waMsgSendRepo, nxCloudService)
	taskServer := server.NewConsumerServer(confData, taskService)
	initRepo := data.NewInitDB(dataData, logger)
	init := biz.NewInit(initRepo, logger)
	initService := service.NewInitService(init, redisService, helpCodeUsecase, feishuFeishu, logger)
	httpServer := server.NewHTTPConsumerServer(confServer, logger, initService)
	app := newApp(logger, taskServer, httpServer)
	return app, func() {
		cleanup2()
		cleanup()
	}, nil
}
