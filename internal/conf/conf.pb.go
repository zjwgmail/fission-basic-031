// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: conf/conf.proto

package conf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Bootstrap struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Server        *Server                     `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	Data          *Data                       `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Business      *Business                   `protobuf:"bytes,3,opt,name=business,proto3" json:"business,omitempty"`
	MsgMap        map[string]*MsgLanguageInfo `protobuf:"bytes,4,rep,name=MsgMap,proto3" json:"MsgMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Bootstrap) Reset() {
	*x = Bootstrap{}
	mi := &file_conf_conf_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Bootstrap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bootstrap) ProtoMessage() {}

func (x *Bootstrap) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bootstrap.ProtoReflect.Descriptor instead.
func (*Bootstrap) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{0}
}

func (x *Bootstrap) GetServer() *Server {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *Bootstrap) GetData() *Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Bootstrap) GetBusiness() *Business {
	if x != nil {
		return x.Business
	}
	return nil
}

func (x *Bootstrap) GetMsgMap() map[string]*MsgLanguageInfo {
	if x != nil {
		return x.MsgMap
	}
	return nil
}

type Server struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Http          *Server_HTTP           `protobuf:"bytes,1,opt,name=http,proto3" json:"http,omitempty"`
	Grpc          *Server_GRPC           `protobuf:"bytes,2,opt,name=grpc,proto3" json:"grpc,omitempty"`
	JobHttp       *Server_HTTP           `protobuf:"bytes,3,opt,name=job_http,json=jobHttp,proto3" json:"job_http,omitempty"`
	ConsumerHttp  *Server_HTTP           `protobuf:"bytes,4,opt,name=consumer_http,json=consumerHttp,proto3" json:"consumer_http,omitempty"`
	StaticHttp    *Server_HTTP           `protobuf:"bytes,5,opt,name=static_http,json=staticHttp,proto3" json:"static_http,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Server) Reset() {
	*x = Server{}
	mi := &file_conf_conf_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Server) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server) ProtoMessage() {}

func (x *Server) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server.ProtoReflect.Descriptor instead.
func (*Server) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{1}
}

func (x *Server) GetHttp() *Server_HTTP {
	if x != nil {
		return x.Http
	}
	return nil
}

func (x *Server) GetGrpc() *Server_GRPC {
	if x != nil {
		return x.Grpc
	}
	return nil
}

func (x *Server) GetJobHttp() *Server_HTTP {
	if x != nil {
		return x.JobHttp
	}
	return nil
}

func (x *Server) GetConsumerHttp() *Server_HTTP {
	if x != nil {
		return x.ConsumerHttp
	}
	return nil
}

func (x *Server) GetStaticHttp() *Server_HTTP {
	if x != nil {
		return x.StaticHttp
	}
	return nil
}

type Data struct {
	state               protoimpl.MessageState         `protogen:"open.v1"`
	Database            *Data_Database                 `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"`
	Redis               *Data_Redis                    `protobuf:"bytes,2,opt,name=redis,proto3" json:"redis,omitempty"`
	CronTask            *Data_CronTask                 `protobuf:"bytes,3,opt,name=cron_task,json=cronTask,proto3" json:"cron_task,omitempty"`
	Queue               *Data_Queue                    `protobuf:"bytes,4,opt,name=queue,proto3" json:"queue,omitempty"`
	Feishu              *Data_Feishu                   `protobuf:"bytes,5,opt,name=feishu,proto3" json:"feishu,omitempty"`
	AttendEnable        bool                           `protobuf:"varint,6,opt,name=attend_enable,json=attendEnable,proto3" json:"attend_enable,omitempty"`
	JoinGroup           *Data_JoinGroup                `protobuf:"bytes,7,opt,name=join_group,json=joinGroup,proto3" json:"join_group,omitempty"`
	Nx                  *Data_Nx                       `protobuf:"bytes,8,opt,name=nx,proto3" json:"nx,omitempty"`
	Rsa                 *Data_Rsa                      `protobuf:"bytes,9,opt,name=rsa,proto3" json:"rsa,omitempty"`
	MethodInsertMsgInfo map[string]*Data_MsgPrefixInfo `protobuf:"bytes,10,rep,name=methodInsertMsgInfo,proto3" json:"methodInsertMsgInfo,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	EmailConfig         *Data_EmailConfig              `protobuf:"bytes,11,opt,name=emailConfig,proto3" json:"emailConfig,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Data) Reset() {
	*x = Data{}
	mi := &file_conf_conf_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data) ProtoMessage() {}

func (x *Data) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data.ProtoReflect.Descriptor instead.
func (*Data) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{2}
}

func (x *Data) GetDatabase() *Data_Database {
	if x != nil {
		return x.Database
	}
	return nil
}

func (x *Data) GetRedis() *Data_Redis {
	if x != nil {
		return x.Redis
	}
	return nil
}

func (x *Data) GetCronTask() *Data_CronTask {
	if x != nil {
		return x.CronTask
	}
	return nil
}

func (x *Data) GetQueue() *Data_Queue {
	if x != nil {
		return x.Queue
	}
	return nil
}

func (x *Data) GetFeishu() *Data_Feishu {
	if x != nil {
		return x.Feishu
	}
	return nil
}

func (x *Data) GetAttendEnable() bool {
	if x != nil {
		return x.AttendEnable
	}
	return false
}

func (x *Data) GetJoinGroup() *Data_JoinGroup {
	if x != nil {
		return x.JoinGroup
	}
	return nil
}

func (x *Data) GetNx() *Data_Nx {
	if x != nil {
		return x.Nx
	}
	return nil
}

func (x *Data) GetRsa() *Data_Rsa {
	if x != nil {
		return x.Rsa
	}
	return nil
}

func (x *Data) GetMethodInsertMsgInfo() map[string]*Data_MsgPrefixInfo {
	if x != nil {
		return x.MethodInsertMsgInfo
	}
	return nil
}

func (x *Data) GetEmailConfig() *Data_EmailConfig {
	if x != nil {
		return x.EmailConfig
	}
	return nil
}

type Business struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Activity      *Business_Activity     `protobuf:"bytes,1,opt,name=activity,proto3" json:"activity,omitempty"`
	ShortLink     *Business_ShortLink    `protobuf:"bytes,2,opt,name=shortLink,proto3" json:"shortLink,omitempty"`
	S3Config      *Business_S3Config     `protobuf:"bytes,3,opt,name=s3Config,proto3" json:"s3Config,omitempty"`
	Cdk           *Business_CDK          `protobuf:"bytes,4,opt,name=cdk,proto3" json:"cdk,omitempty"`
	HelpCode      *Business_HelpCode     `protobuf:"bytes,5,opt,name=helpCode,proto3" json:"helpCode,omitempty"`
	Statistics    *Business_Statistics   `protobuf:"bytes,6,opt,name=statistics,proto3" json:"statistics,omitempty"`
	PushEvent1    *Business_Drainage     `protobuf:"bytes,7,opt,name=pushEvent1,proto3" json:"pushEvent1,omitempty"`
	PushEvent2    *Business_Drainage     `protobuf:"bytes,8,opt,name=pushEvent2,proto3" json:"pushEvent2,omitempty"`
	PushEvent3    *Business_Drainage     `protobuf:"bytes,9,opt,name=pushEvent3,proto3" json:"pushEvent3,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Business) Reset() {
	*x = Business{}
	mi := &file_conf_conf_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Business) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Business) ProtoMessage() {}

func (x *Business) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Business.ProtoReflect.Descriptor instead.
func (*Business) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{3}
}

func (x *Business) GetActivity() *Business_Activity {
	if x != nil {
		return x.Activity
	}
	return nil
}

func (x *Business) GetShortLink() *Business_ShortLink {
	if x != nil {
		return x.ShortLink
	}
	return nil
}

func (x *Business) GetS3Config() *Business_S3Config {
	if x != nil {
		return x.S3Config
	}
	return nil
}

func (x *Business) GetCdk() *Business_CDK {
	if x != nil {
		return x.Cdk
	}
	return nil
}

func (x *Business) GetHelpCode() *Business_HelpCode {
	if x != nil {
		return x.HelpCode
	}
	return nil
}

func (x *Business) GetStatistics() *Business_Statistics {
	if x != nil {
		return x.Statistics
	}
	return nil
}

func (x *Business) GetPushEvent1() *Business_Drainage {
	if x != nil {
		return x.PushEvent1
	}
	return nil
}

func (x *Business) GetPushEvent2() *Business_Drainage {
	if x != nil {
		return x.PushEvent2
	}
	return nil
}

func (x *Business) GetPushEvent3() *Business_Drainage {
	if x != nil {
		return x.PushEvent3
	}
	return nil
}

type MsgLanguageInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	L01           map[string]*MsgInfo    `protobuf:"bytes,1,rep,name=L01,proto3" json:"L01,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	L02           map[string]*MsgInfo    `protobuf:"bytes,2,rep,name=L02,proto3" json:"L02,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	L03           map[string]*MsgInfo    `protobuf:"bytes,3,rep,name=L03,proto3" json:"L03,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	L04           map[string]*MsgInfo    `protobuf:"bytes,4,rep,name=L04,proto3" json:"L04,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	L05           map[string]*MsgInfo    `protobuf:"bytes,5,rep,name=L05,proto3" json:"L05,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MsgLanguageInfo) Reset() {
	*x = MsgLanguageInfo{}
	mi := &file_conf_conf_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MsgLanguageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgLanguageInfo) ProtoMessage() {}

func (x *MsgLanguageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgLanguageInfo.ProtoReflect.Descriptor instead.
func (*MsgLanguageInfo) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{4}
}

func (x *MsgLanguageInfo) GetL01() map[string]*MsgInfo {
	if x != nil {
		return x.L01
	}
	return nil
}

func (x *MsgLanguageInfo) GetL02() map[string]*MsgInfo {
	if x != nil {
		return x.L02
	}
	return nil
}

func (x *MsgLanguageInfo) GetL03() map[string]*MsgInfo {
	if x != nil {
		return x.L03
	}
	return nil
}

func (x *MsgLanguageInfo) GetL04() map[string]*MsgInfo {
	if x != nil {
		return x.L04
	}
	return nil
}

func (x *MsgLanguageInfo) GetL05() map[string]*MsgInfo {
	if x != nil {
		return x.L05
	}
	return nil
}

// MsgInfo
type MsgInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Interactive   *Interactive           `protobuf:"bytes,1,opt,name=interactive,proto3" json:"interactive,omitempty"`
	Template      *Template              `protobuf:"bytes,2,opt,name=template,proto3" json:"template,omitempty"`
	Params        *Params                `protobuf:"bytes,3,opt,name=params,proto3" json:"params,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MsgInfo) Reset() {
	*x = MsgInfo{}
	mi := &file_conf_conf_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MsgInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgInfo) ProtoMessage() {}

func (x *MsgInfo) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgInfo.ProtoReflect.Descriptor instead.
func (*MsgInfo) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{5}
}

func (x *MsgInfo) GetInteractive() *Interactive {
	if x != nil {
		return x.Interactive
	}
	return nil
}

func (x *MsgInfo) GetTemplate() *Template {
	if x != nil {
		return x.Template
	}
	return nil
}

func (x *MsgInfo) GetParams() *Params {
	if x != nil {
		return x.Params
	}
	return nil
}

// Params
type Params struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NicknameList  []string               `protobuf:"bytes,1,rep,name=nicknameList,proto3" json:"nicknameList,omitempty"`
	Language      string                 `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Params) Reset() {
	*x = Params{}
	mi := &file_conf_conf_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Params) ProtoMessage() {}

func (x *Params) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Params.ProtoReflect.Descriptor instead.
func (*Params) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{6}
}

func (x *Params) GetNicknameList() []string {
	if x != nil {
		return x.NicknameList
	}
	return nil
}

func (x *Params) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

// Interactive
type Interactive struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	ImageLink     string                 `protobuf:"bytes,2,opt,name=imageLink,proto3" json:"imageLink,omitempty"`
	BodyText      string                 `protobuf:"bytes,3,opt,name=bodyText,proto3" json:"bodyText,omitempty"`
	DooterText    string                 `protobuf:"bytes,4,opt,name=dooterText,proto3" json:"dooterText,omitempty"`
	Action        *Action                `protobuf:"bytes,5,opt,name=action,proto3" json:"action,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Interactive) Reset() {
	*x = Interactive{}
	mi := &file_conf_conf_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Interactive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interactive) ProtoMessage() {}

func (x *Interactive) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interactive.ProtoReflect.Descriptor instead.
func (*Interactive) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{7}
}

func (x *Interactive) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Interactive) GetImageLink() string {
	if x != nil {
		return x.ImageLink
	}
	return ""
}

func (x *Interactive) GetBodyText() string {
	if x != nil {
		return x.BodyText
	}
	return ""
}

func (x *Interactive) GetDooterText() string {
	if x != nil {
		return x.DooterText
	}
	return ""
}

func (x *Interactive) GetAction() *Action {
	if x != nil {
		return x.Action
	}
	return nil
}

// Action
type Action struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DisplayText   string                 `protobuf:"bytes,1,opt,name=displayText,proto3" json:"displayText,omitempty"`
	Url           string                 `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	ShortLink     string                 `protobuf:"bytes,3,opt,name=shortLink,proto3" json:"shortLink,omitempty"`
	Buttons       []*Button              `protobuf:"bytes,4,rep,name=buttons,proto3" json:"buttons,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Action) Reset() {
	*x = Action{}
	mi := &file_conf_conf_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action) ProtoMessage() {}

func (x *Action) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action.ProtoReflect.Descriptor instead.
func (*Action) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{8}
}

func (x *Action) GetDisplayText() string {
	if x != nil {
		return x.DisplayText
	}
	return ""
}

func (x *Action) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Action) GetShortLink() string {
	if x != nil {
		return x.ShortLink
	}
	return ""
}

func (x *Action) GetButtons() []*Button {
	if x != nil {
		return x.Buttons
	}
	return nil
}

// Button
type Button struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Reply         *Reply                 `protobuf:"bytes,2,opt,name=reply,proto3" json:"reply,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Button) Reset() {
	*x = Button{}
	mi := &file_conf_conf_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Button) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Button) ProtoMessage() {}

func (x *Button) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Button.ProtoReflect.Descriptor instead.
func (*Button) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{9}
}

func (x *Button) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Button) GetReply() *Reply {
	if x != nil {
		return x.Reply
	}
	return nil
}

// Reply
type Reply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title         string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Reply) Reset() {
	*x = Reply{}
	mi := &file_conf_conf_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Reply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reply) ProtoMessage() {}

func (x *Reply) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reply.ProtoReflect.Descriptor instead.
func (*Reply) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{10}
}

func (x *Reply) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Reply) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

// Template
type Template struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Name          string                    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Language      *NxReqTemplateLanguage    `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`
	Components    []*NxReqTemplateComponent `protobuf:"bytes,3,rep,name=components,proto3" json:"components,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Template) Reset() {
	*x = Template{}
	mi := &file_conf_conf_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Template) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Template) ProtoMessage() {}

func (x *Template) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Template.ProtoReflect.Descriptor instead.
func (*Template) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{11}
}

func (x *Template) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Template) GetLanguage() *NxReqTemplateLanguage {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Template) GetComponents() []*NxReqTemplateComponent {
	if x != nil {
		return x.Components
	}
	return nil
}

// NxReqTemplateLanguage
type NxReqTemplateLanguage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Policy        string                 `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
	Code          string                 `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NxReqTemplateLanguage) Reset() {
	*x = NxReqTemplateLanguage{}
	mi := &file_conf_conf_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NxReqTemplateLanguage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NxReqTemplateLanguage) ProtoMessage() {}

func (x *NxReqTemplateLanguage) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NxReqTemplateLanguage.ProtoReflect.Descriptor instead.
func (*NxReqTemplateLanguage) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{12}
}

func (x *NxReqTemplateLanguage) GetPolicy() string {
	if x != nil {
		return x.Policy
	}
	return ""
}

func (x *NxReqTemplateLanguage) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

// NxReqTemplateComponent
type NxReqTemplateComponent struct {
	state         protoimpl.MessageState             `protogen:"open.v1"`
	Type          string                             `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Parameters    []*NxReqTemplateComponentParameter `protobuf:"bytes,2,rep,name=parameters,proto3" json:"parameters,omitempty"`
	SubType       string                             `protobuf:"bytes,3,opt,name=subType,proto3" json:"subType,omitempty"`
	Index         int32                              `protobuf:"varint,4,opt,name=index,proto3" json:"index,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NxReqTemplateComponent) Reset() {
	*x = NxReqTemplateComponent{}
	mi := &file_conf_conf_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NxReqTemplateComponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NxReqTemplateComponent) ProtoMessage() {}

func (x *NxReqTemplateComponent) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NxReqTemplateComponent.ProtoReflect.Descriptor instead.
func (*NxReqTemplateComponent) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{13}
}

func (x *NxReqTemplateComponent) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *NxReqTemplateComponent) GetParameters() []*NxReqTemplateComponentParameter {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *NxReqTemplateComponent) GetSubType() string {
	if x != nil {
		return x.SubType
	}
	return ""
}

func (x *NxReqTemplateComponent) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

// NxReqTemplateComponentParameter
type NxReqTemplateComponentParameter struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Type          string                       `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Text          string                       `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	Image         *NxReqTemplateComponentImage `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NxReqTemplateComponentParameter) Reset() {
	*x = NxReqTemplateComponentParameter{}
	mi := &file_conf_conf_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NxReqTemplateComponentParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NxReqTemplateComponentParameter) ProtoMessage() {}

func (x *NxReqTemplateComponentParameter) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NxReqTemplateComponentParameter.ProtoReflect.Descriptor instead.
func (*NxReqTemplateComponentParameter) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{14}
}

func (x *NxReqTemplateComponentParameter) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *NxReqTemplateComponentParameter) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *NxReqTemplateComponentParameter) GetImage() *NxReqTemplateComponentImage {
	if x != nil {
		return x.Image
	}
	return nil
}

// NxReqTemplateComponentImage
type NxReqTemplateComponentImage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NxReqTemplateComponentImage) Reset() {
	*x = NxReqTemplateComponentImage{}
	mi := &file_conf_conf_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NxReqTemplateComponentImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NxReqTemplateComponentImage) ProtoMessage() {}

func (x *NxReqTemplateComponentImage) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NxReqTemplateComponentImage.ProtoReflect.Descriptor instead.
func (*NxReqTemplateComponentImage) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{15}
}

func (x *NxReqTemplateComponentImage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type Server_HTTP struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Network       string                 `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	Addr          string                 `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	Timeout       *durationpb.Duration   `protobuf:"bytes,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Server_HTTP) Reset() {
	*x = Server_HTTP{}
	mi := &file_conf_conf_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Server_HTTP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server_HTTP) ProtoMessage() {}

func (x *Server_HTTP) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server_HTTP.ProtoReflect.Descriptor instead.
func (*Server_HTTP) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Server_HTTP) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *Server_HTTP) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *Server_HTTP) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

type Server_GRPC struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Network       string                 `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	Addr          string                 `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	Timeout       *durationpb.Duration   `protobuf:"bytes,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Server_GRPC) Reset() {
	*x = Server_GRPC{}
	mi := &file_conf_conf_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Server_GRPC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server_GRPC) ProtoMessage() {}

func (x *Server_GRPC) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server_GRPC.ProtoReflect.Descriptor instead.
func (*Server_GRPC) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{1, 1}
}

func (x *Server_GRPC) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *Server_GRPC) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *Server_GRPC) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

type Data_Database struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Driver        string                 `protobuf:"bytes,1,opt,name=driver,proto3" json:"driver,omitempty"`
	Source        string                 `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	MaxIdle       int64                  `protobuf:"varint,3,opt,name=max_idle,json=maxIdle,proto3" json:"max_idle,omitempty"`
	MaxOpen       int64                  `protobuf:"varint,4,opt,name=max_open,json=maxOpen,proto3" json:"max_open,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Data_Database) Reset() {
	*x = Data_Database{}
	mi := &file_conf_conf_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data_Database) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data_Database) ProtoMessage() {}

func (x *Data_Database) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data_Database.ProtoReflect.Descriptor instead.
func (*Data_Database) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Data_Database) GetDriver() string {
	if x != nil {
		return x.Driver
	}
	return ""
}

func (x *Data_Database) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Data_Database) GetMaxIdle() int64 {
	if x != nil {
		return x.MaxIdle
	}
	return 0
}

func (x *Data_Database) GetMaxOpen() int64 {
	if x != nil {
		return x.MaxOpen
	}
	return 0
}

type Data_Redis struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Network       string                 `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	Addr          string                 `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	Password      string                 `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	MaxOpen       int64                  `protobuf:"varint,4,opt,name=max_open,json=maxOpen,proto3" json:"max_open,omitempty"`
	PoolSize      int64                  `protobuf:"varint,5,opt,name=pool_size,json=poolSize,proto3" json:"pool_size,omitempty"`
	MinIdleConns  int64                  `protobuf:"varint,6,opt,name=min_idle_conns,json=minIdleConns,proto3" json:"min_idle_conns,omitempty"`
	ReadTimeout   *durationpb.Duration   `protobuf:"bytes,7,opt,name=read_timeout,json=readTimeout,proto3" json:"read_timeout,omitempty"`
	WriteTimeout  *durationpb.Duration   `protobuf:"bytes,8,opt,name=write_timeout,json=writeTimeout,proto3" json:"write_timeout,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Data_Redis) Reset() {
	*x = Data_Redis{}
	mi := &file_conf_conf_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data_Redis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data_Redis) ProtoMessage() {}

func (x *Data_Redis) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data_Redis.ProtoReflect.Descriptor instead.
func (*Data_Redis) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{2, 1}
}

func (x *Data_Redis) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *Data_Redis) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *Data_Redis) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Data_Redis) GetMaxOpen() int64 {
	if x != nil {
		return x.MaxOpen
	}
	return 0
}

func (x *Data_Redis) GetPoolSize() int64 {
	if x != nil {
		return x.PoolSize
	}
	return 0
}

func (x *Data_Redis) GetMinIdleConns() int64 {
	if x != nil {
		return x.MinIdleConns
	}
	return 0
}

func (x *Data_Redis) GetReadTimeout() *durationpb.Duration {
	if x != nil {
		return x.ReadTimeout
	}
	return nil
}

func (x *Data_Redis) GetWriteTimeout() *durationpb.Duration {
	if x != nil {
		return x.WriteTimeout
	}
	return nil
}

type Data_Cron struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Enable        bool                   `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	Spec          string                 `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"` // * * * * * 分别对应分、时、天、周、月
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Data_Cron) Reset() {
	*x = Data_Cron{}
	mi := &file_conf_conf_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data_Cron) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data_Cron) ProtoMessage() {}

func (x *Data_Cron) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data_Cron.ProtoReflect.Descriptor instead.
func (*Data_Cron) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{2, 2}
}

func (x *Data_Cron) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *Data_Cron) GetSpec() string {
	if x != nil {
		return x.Spec
	}
	return ""
}

type Data_CronTask struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	ResendRetryMsg           *Data_Cron             `protobuf:"bytes,1,opt,name=resend_retry_msg,json=resendRetryMsg,proto3" json:"resend_retry_msg,omitempty"`
	ResendMsg                *Data_Cron             `protobuf:"bytes,2,opt,name=resend_msg,json=resendMsg,proto3" json:"resend_msg,omitempty"`
	OfficialQueueMonitor     *Data_Cron             `protobuf:"bytes,3,opt,name=official_queue_monitor,json=officialQueueMonitor,proto3" json:"official_queue_monitor,omitempty"`
	UnofficialQueueMonitor   *Data_Cron             `protobuf:"bytes,4,opt,name=unofficial_queue_monitor,json=unofficialQueueMonitor,proto3" json:"unofficial_queue_monitor,omitempty"`
	RenewQueueMonitor        *Data_Cron             `protobuf:"bytes,5,opt,name=renew_queue_monitor,json=renewQueueMonitor,proto3" json:"renew_queue_monitor,omitempty"`
	CallMsgQueueMonitor      *Data_Cron             `protobuf:"bytes,6,opt,name=call_msg_queue_monitor,json=callMsgQueueMonitor,proto3" json:"call_msg_queue_monitor,omitempty"`
	EmailReportUtc8Task      *Data_Cron             `protobuf:"bytes,7,opt,name=email_report_utc8_task,json=emailReportUtc8Task,proto3" json:"email_report_utc8_task,omitempty"`
	EmailReportUtc0Task      *Data_Cron             `protobuf:"bytes,8,opt,name=email_report_utc0_task,json=emailReportUtc0Task,proto3" json:"email_report_utc0_task,omitempty"`
	EmailReportUtcMinus8Task *Data_Cron             `protobuf:"bytes,9,opt,name=email_report_utc_minus8_task,json=emailReportUtcMinus8Task,proto3" json:"email_report_utc_minus8_task,omitempty"`
	RetryOfficialMsg         *Data_Cron             `protobuf:"bytes,10,opt,name=retry_official_msg,json=retryOfficialMsg,proto3" json:"retry_official_msg,omitempty"`
	RetryUnofficialMsg       *Data_Cron             `protobuf:"bytes,11,opt,name=retry_unofficial_msg,json=retryUnofficialMsg,proto3" json:"retry_unofficial_msg,omitempty"`
	RetryReceiptMsgRecord    *Data_Cron             `protobuf:"bytes,12,opt,name=retry_receipt_msg_record,json=retryReceiptMsgRecord,proto3" json:"retry_receipt_msg_record,omitempty"`
	ActivityTask             *Data_Cron             `protobuf:"bytes,13,opt,name=activity_task,json=activityTask,proto3" json:"activity_task,omitempty"`
	FeishuReportTask         *Data_Cron             `protobuf:"bytes,14,opt,name=feishu_report_task,json=feishuReportTask,proto3" json:"feishu_report_task,omitempty"`
	// 消息提醒
	UserRemindFreeCdk *Data_Cron `protobuf:"bytes,15,opt,name=user_remind_free_cdk,json=userRemindFreeCdk,proto3" json:"user_remind_free_cdk,omitempty"`
	UserRemindV22     *Data_Cron `protobuf:"bytes,16,opt,name=user_remind_v22,json=userRemindV22,proto3" json:"user_remind_v22,omitempty"`
	UserRemindV3      *Data_Cron `protobuf:"bytes,17,opt,name=user_remind_v3,json=userRemindV3,proto3" json:"user_remind_v3,omitempty"`
	PushEvent1Send    *Data_Cron `protobuf:"bytes,18,opt,name=push_event1_send,json=pushEvent1Send,proto3" json:"push_event1_send,omitempty"`
	PushEvent2Send    *Data_Cron `protobuf:"bytes,19,opt,name=push_event2_send,json=pushEvent2Send,proto3" json:"push_event2_send,omitempty"`
	PushEvent3Send    *Data_Cron `protobuf:"bytes,20,opt,name=push_event3_send,json=pushEvent3Send,proto3" json:"push_event3_send,omitempty"`
	PushEvent4Send    *Data_Cron `protobuf:"bytes,21,opt,name=push_event4_send,json=pushEvent4Send,proto3" json:"push_event4_send,omitempty"`
	GwQueueMonitor    *Data_Cron `protobuf:"bytes,22,opt,name=gw_queue_monitor,json=gwQueueMonitor,proto3" json:"gw_queue_monitor,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Data_CronTask) Reset() {
	*x = Data_CronTask{}
	mi := &file_conf_conf_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data_CronTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data_CronTask) ProtoMessage() {}

func (x *Data_CronTask) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data_CronTask.ProtoReflect.Descriptor instead.
func (*Data_CronTask) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{2, 3}
}

func (x *Data_CronTask) GetResendRetryMsg() *Data_Cron {
	if x != nil {
		return x.ResendRetryMsg
	}
	return nil
}

func (x *Data_CronTask) GetResendMsg() *Data_Cron {
	if x != nil {
		return x.ResendMsg
	}
	return nil
}

func (x *Data_CronTask) GetOfficialQueueMonitor() *Data_Cron {
	if x != nil {
		return x.OfficialQueueMonitor
	}
	return nil
}

func (x *Data_CronTask) GetUnofficialQueueMonitor() *Data_Cron {
	if x != nil {
		return x.UnofficialQueueMonitor
	}
	return nil
}

func (x *Data_CronTask) GetRenewQueueMonitor() *Data_Cron {
	if x != nil {
		return x.RenewQueueMonitor
	}
	return nil
}

func (x *Data_CronTask) GetCallMsgQueueMonitor() *Data_Cron {
	if x != nil {
		return x.CallMsgQueueMonitor
	}
	return nil
}

func (x *Data_CronTask) GetEmailReportUtc8Task() *Data_Cron {
	if x != nil {
		return x.EmailReportUtc8Task
	}
	return nil
}

func (x *Data_CronTask) GetEmailReportUtc0Task() *Data_Cron {
	if x != nil {
		return x.EmailReportUtc0Task
	}
	return nil
}

func (x *Data_CronTask) GetEmailReportUtcMinus8Task() *Data_Cron {
	if x != nil {
		return x.EmailReportUtcMinus8Task
	}
	return nil
}

func (x *Data_CronTask) GetRetryOfficialMsg() *Data_Cron {
	if x != nil {
		return x.RetryOfficialMsg
	}
	return nil
}

func (x *Data_CronTask) GetRetryUnofficialMsg() *Data_Cron {
	if x != nil {
		return x.RetryUnofficialMsg
	}
	return nil
}

func (x *Data_CronTask) GetRetryReceiptMsgRecord() *Data_Cron {
	if x != nil {
		return x.RetryReceiptMsgRecord
	}
	return nil
}

func (x *Data_CronTask) GetActivityTask() *Data_Cron {
	if x != nil {
		return x.ActivityTask
	}
	return nil
}

func (x *Data_CronTask) GetFeishuReportTask() *Data_Cron {
	if x != nil {
		return x.FeishuReportTask
	}
	return nil
}

func (x *Data_CronTask) GetUserRemindFreeCdk() *Data_Cron {
	if x != nil {
		return x.UserRemindFreeCdk
	}
	return nil
}

func (x *Data_CronTask) GetUserRemindV22() *Data_Cron {
	if x != nil {
		return x.UserRemindV22
	}
	return nil
}

func (x *Data_CronTask) GetUserRemindV3() *Data_Cron {
	if x != nil {
		return x.UserRemindV3
	}
	return nil
}

func (x *Data_CronTask) GetPushEvent1Send() *Data_Cron {
	if x != nil {
		return x.PushEvent1Send
	}
	return nil
}

func (x *Data_CronTask) GetPushEvent2Send() *Data_Cron {
	if x != nil {
		return x.PushEvent2Send
	}
	return nil
}

func (x *Data_CronTask) GetPushEvent3Send() *Data_Cron {
	if x != nil {
		return x.PushEvent3Send
	}
	return nil
}

func (x *Data_CronTask) GetPushEvent4Send() *Data_Cron {
	if x != nil {
		return x.PushEvent4Send
	}
	return nil
}

func (x *Data_CronTask) GetGwQueueMonitor() *Data_Cron {
	if x != nil {
		return x.GwQueueMonitor
	}
	return nil
}

type Data_Queue struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OfficialKey   string                 `protobuf:"bytes,1,opt,name=official_key,json=officialKey,proto3" json:"official_key,omitempty"`
	UnofficialKey string                 `protobuf:"bytes,2,opt,name=unofficial_key,json=unofficialKey,proto3" json:"unofficial_key,omitempty"`
	RenewMsg      string                 `protobuf:"bytes,3,opt,name=renew_msg,json=renewMsg,proto3" json:"renew_msg,omitempty"`                  // 续免费
	CallMsg       string                 `protobuf:"bytes,4,opt,name=call_msg,json=callMsg,proto3" json:"call_msg,omitempty"`                     // 回执消息
	RepeatHelpKey string                 `protobuf:"bytes,5,opt,name=repeat_help_key,json=repeatHelpKey,proto3" json:"repeat_help_key,omitempty"` // 重复助力
	Gw            string                 `protobuf:"bytes,6,opt,name=gw,proto3" json:"gw,omitempty"`
	GwRecall      string                 `protobuf:"bytes,7,opt,name=gw_recall,json=gwRecall,proto3" json:"gw_recall,omitempty"`
	GwUnknown     string                 `protobuf:"bytes,8,opt,name=gw_unknown,json=gwUnknown,proto3" json:"gw_unknown,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Data_Queue) Reset() {
	*x = Data_Queue{}
	mi := &file_conf_conf_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data_Queue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data_Queue) ProtoMessage() {}

func (x *Data_Queue) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data_Queue.ProtoReflect.Descriptor instead.
func (*Data_Queue) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{2, 4}
}

func (x *Data_Queue) GetOfficialKey() string {
	if x != nil {
		return x.OfficialKey
	}
	return ""
}

func (x *Data_Queue) GetUnofficialKey() string {
	if x != nil {
		return x.UnofficialKey
	}
	return ""
}

func (x *Data_Queue) GetRenewMsg() string {
	if x != nil {
		return x.RenewMsg
	}
	return ""
}

func (x *Data_Queue) GetCallMsg() string {
	if x != nil {
		return x.CallMsg
	}
	return ""
}

func (x *Data_Queue) GetRepeatHelpKey() string {
	if x != nil {
		return x.RepeatHelpKey
	}
	return ""
}

func (x *Data_Queue) GetGw() string {
	if x != nil {
		return x.Gw
	}
	return ""
}

func (x *Data_Queue) GetGwRecall() string {
	if x != nil {
		return x.GwRecall
	}
	return ""
}

func (x *Data_Queue) GetGwUnknown() string {
	if x != nil {
		return x.GwUnknown
	}
	return ""
}

type Data_Feishu struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Webhook        string                 `protobuf:"bytes,1,opt,name=webhook,proto3" json:"webhook,omitempty"`
	DevelopWebhook string                 `protobuf:"bytes,2,opt,name=develop_webhook,json=developWebhook,proto3" json:"develop_webhook,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Data_Feishu) Reset() {
	*x = Data_Feishu{}
	mi := &file_conf_conf_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data_Feishu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data_Feishu) ProtoMessage() {}

func (x *Data_Feishu) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data_Feishu.ProtoReflect.Descriptor instead.
func (*Data_Feishu) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{2, 5}
}

func (x *Data_Feishu) GetWebhook() string {
	if x != nil {
		return x.Webhook
	}
	return ""
}

func (x *Data_Feishu) GetDevelopWebhook() string {
	if x != nil {
		return x.DevelopWebhook
	}
	return ""
}

type Data_JoinGroup struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MaxNum        int32                  `protobuf:"varint,1,opt,name=max_num,json=maxNum,proto3" json:"max_num,omitempty"` // 最大助力次数
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Data_JoinGroup) Reset() {
	*x = Data_JoinGroup{}
	mi := &file_conf_conf_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data_JoinGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data_JoinGroup) ProtoMessage() {}

func (x *Data_JoinGroup) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data_JoinGroup.ProtoReflect.Descriptor instead.
func (*Data_JoinGroup) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{2, 6}
}

func (x *Data_JoinGroup) GetMaxNum() int32 {
	if x != nil {
		return x.MaxNum
	}
	return 0
}

type Data_Nx struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ak            string                 `protobuf:"bytes,1,opt,name=ak,proto3" json:"ak,omitempty"`
	Sk            string                 `protobuf:"bytes,2,opt,name=sk,proto3" json:"sk,omitempty"`
	AppKey        string                 `protobuf:"bytes,3,opt,name=appKey,proto3" json:"appKey,omitempty"`
	BusinessPhone string                 `protobuf:"bytes,4,opt,name=businessPhone,proto3" json:"businessPhone,omitempty"`
	IsVerifySign  bool                   `protobuf:"varint,5,opt,name=isVerifySign,proto3" json:"isVerifySign,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Data_Nx) Reset() {
	*x = Data_Nx{}
	mi := &file_conf_conf_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data_Nx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data_Nx) ProtoMessage() {}

func (x *Data_Nx) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data_Nx.ProtoReflect.Descriptor instead.
func (*Data_Nx) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{2, 7}
}

func (x *Data_Nx) GetAk() string {
	if x != nil {
		return x.Ak
	}
	return ""
}

func (x *Data_Nx) GetSk() string {
	if x != nil {
		return x.Sk
	}
	return ""
}

func (x *Data_Nx) GetAppKey() string {
	if x != nil {
		return x.AppKey
	}
	return ""
}

func (x *Data_Nx) GetBusinessPhone() string {
	if x != nil {
		return x.BusinessPhone
	}
	return ""
}

func (x *Data_Nx) GetIsVerifySign() bool {
	if x != nil {
		return x.IsVerifySign
	}
	return false
}

type Data_Rsa struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PrivateKey    string                 `protobuf:"bytes,1,opt,name=privateKey,proto3" json:"privateKey,omitempty"`
	PublicKey     string                 `protobuf:"bytes,2,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Data_Rsa) Reset() {
	*x = Data_Rsa{}
	mi := &file_conf_conf_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data_Rsa) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data_Rsa) ProtoMessage() {}

func (x *Data_Rsa) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data_Rsa.ProtoReflect.Descriptor instead.
func (*Data_Rsa) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{2, 8}
}

func (x *Data_Rsa) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

func (x *Data_Rsa) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

type Data_MsgPrefixInfo struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	UserAttendPrefixList       []string               `protobuf:"bytes,1,rep,name=userAttendPrefixList,proto3" json:"userAttendPrefixList,omitempty"`
	UserAttendOfHelpPrefixList []string               `protobuf:"bytes,2,rep,name=userAttendOfHelpPrefixList,proto3" json:"userAttendOfHelpPrefixList,omitempty"`
	RenewFreePrefixList        []string               `protobuf:"bytes,3,rep,name=renewFreePrefixList,proto3" json:"renewFreePrefixList,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *Data_MsgPrefixInfo) Reset() {
	*x = Data_MsgPrefixInfo{}
	mi := &file_conf_conf_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data_MsgPrefixInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data_MsgPrefixInfo) ProtoMessage() {}

func (x *Data_MsgPrefixInfo) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data_MsgPrefixInfo.ProtoReflect.Descriptor instead.
func (*Data_MsgPrefixInfo) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{2, 9}
}

func (x *Data_MsgPrefixInfo) GetUserAttendPrefixList() []string {
	if x != nil {
		return x.UserAttendPrefixList
	}
	return nil
}

func (x *Data_MsgPrefixInfo) GetUserAttendOfHelpPrefixList() []string {
	if x != nil {
		return x.UserAttendOfHelpPrefixList
	}
	return nil
}

func (x *Data_MsgPrefixInfo) GetRenewFreePrefixList() []string {
	if x != nil {
		return x.RenewFreePrefixList
	}
	return nil
}

type Data_EmailConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ServerHost    string                 `protobuf:"bytes,1,opt,name=serverHost,proto3" json:"serverHost,omitempty"`
	ServerPort    int32                  `protobuf:"varint,2,opt,name=serverPort,proto3" json:"serverPort,omitempty"`
	FromAddress   string                 `protobuf:"bytes,3,opt,name=fromAddress,proto3" json:"fromAddress,omitempty"`
	ApiUser       string                 `protobuf:"bytes,4,opt,name=apiUser,proto3" json:"apiUser,omitempty"`
	ApiKey        string                 `protobuf:"bytes,5,opt,name=apiKey,proto3" json:"apiKey,omitempty"`
	ToAddressList []string               `protobuf:"bytes,6,rep,name=toAddressList,proto3" json:"toAddressList,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Data_EmailConfig) Reset() {
	*x = Data_EmailConfig{}
	mi := &file_conf_conf_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data_EmailConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data_EmailConfig) ProtoMessage() {}

func (x *Data_EmailConfig) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data_EmailConfig.ProtoReflect.Descriptor instead.
func (*Data_EmailConfig) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{2, 10}
}

func (x *Data_EmailConfig) GetServerHost() string {
	if x != nil {
		return x.ServerHost
	}
	return ""
}

func (x *Data_EmailConfig) GetServerPort() int32 {
	if x != nil {
		return x.ServerPort
	}
	return 0
}

func (x *Data_EmailConfig) GetFromAddress() string {
	if x != nil {
		return x.FromAddress
	}
	return ""
}

func (x *Data_EmailConfig) GetApiUser() string {
	if x != nil {
		return x.ApiUser
	}
	return ""
}

func (x *Data_EmailConfig) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *Data_EmailConfig) GetToAddressList() []string {
	if x != nil {
		return x.ToAddressList
	}
	return nil
}

type Business_Activity struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Id                   string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Scheme               string                 `protobuf:"bytes,2,opt,name=scheme,proto3" json:"scheme,omitempty"`
	NeedSubscribe        bool                   `protobuf:"varint,3,opt,name=needSubscribe,proto3" json:"needSubscribe,omitempty"`
	IsDebug              bool                   `protobuf:"varint,4,opt,name=isDebug,proto3" json:"isDebug,omitempty"`
	Title                map[string]string      `protobuf:"bytes,5,rep,name=title,proto3" json:"title,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Desc                 map[string]string      `protobuf:"bytes,6,rep,name=desc,proto3" json:"desc,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ImageLink            map[string]string      `protobuf:"bytes,7,rep,name=imageLink,proto3" json:"imageLink,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ShowDomain           map[string]string      `protobuf:"bytes,8,rep,name=showDomain,proto3" json:"showDomain,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	HelpTextList         []*Business_HelpText   `protobuf:"bytes,9,rep,name=helpTextList,proto3" json:"helpTextList,omitempty"`
	StageAwardList       []*Business_StageInfo  `protobuf:"bytes,10,rep,name=stageAwardList,proto3" json:"stageAwardList,omitempty"`
	WaIdPrefixList       []string               `protobuf:"bytes,11,rep,name=waIdPrefixList,proto3" json:"waIdPrefixList,omitempty"`
	WaRedirectListPrefix string                 `protobuf:"bytes,12,opt,name=waRedirectListPrefix,proto3" json:"waRedirectListPrefix,omitempty"`
	Wa                   *Business_Wa           `protobuf:"bytes,13,opt,name=wa,proto3" json:"wa,omitempty"`
	LanguageList         []string               `protobuf:"bytes,14,rep,name=languageList,proto3" json:"languageList,omitempty"`
	LanguageMap          map[string]string      `protobuf:"bytes,15,rep,name=languageMap,proto3" json:"languageMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ChannelList          []string               `protobuf:"bytes,16,rep,name=channelList,proto3" json:"channelList,omitempty"`
	ChannelMap           map[string]string      `protobuf:"bytes,17,rep,name=channelMap,proto3" json:"channelMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *Business_Activity) Reset() {
	*x = Business_Activity{}
	mi := &file_conf_conf_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Business_Activity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Business_Activity) ProtoMessage() {}

func (x *Business_Activity) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Business_Activity.ProtoReflect.Descriptor instead.
func (*Business_Activity) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{3, 0}
}

func (x *Business_Activity) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Business_Activity) GetScheme() string {
	if x != nil {
		return x.Scheme
	}
	return ""
}

func (x *Business_Activity) GetNeedSubscribe() bool {
	if x != nil {
		return x.NeedSubscribe
	}
	return false
}

func (x *Business_Activity) GetIsDebug() bool {
	if x != nil {
		return x.IsDebug
	}
	return false
}

func (x *Business_Activity) GetTitle() map[string]string {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *Business_Activity) GetDesc() map[string]string {
	if x != nil {
		return x.Desc
	}
	return nil
}

func (x *Business_Activity) GetImageLink() map[string]string {
	if x != nil {
		return x.ImageLink
	}
	return nil
}

func (x *Business_Activity) GetShowDomain() map[string]string {
	if x != nil {
		return x.ShowDomain
	}
	return nil
}

func (x *Business_Activity) GetHelpTextList() []*Business_HelpText {
	if x != nil {
		return x.HelpTextList
	}
	return nil
}

func (x *Business_Activity) GetStageAwardList() []*Business_StageInfo {
	if x != nil {
		return x.StageAwardList
	}
	return nil
}

func (x *Business_Activity) GetWaIdPrefixList() []string {
	if x != nil {
		return x.WaIdPrefixList
	}
	return nil
}

func (x *Business_Activity) GetWaRedirectListPrefix() string {
	if x != nil {
		return x.WaRedirectListPrefix
	}
	return ""
}

func (x *Business_Activity) GetWa() *Business_Wa {
	if x != nil {
		return x.Wa
	}
	return nil
}

func (x *Business_Activity) GetLanguageList() []string {
	if x != nil {
		return x.LanguageList
	}
	return nil
}

func (x *Business_Activity) GetLanguageMap() map[string]string {
	if x != nil {
		return x.LanguageMap
	}
	return nil
}

func (x *Business_Activity) GetChannelList() []string {
	if x != nil {
		return x.ChannelList
	}
	return nil
}

func (x *Business_Activity) GetChannelMap() map[string]string {
	if x != nil {
		return x.ChannelMap
	}
	return nil
}

type Business_ShortLink struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Count         int32                  `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	BaseUrls      []string               `protobuf:"bytes,2,rep,name=baseUrls,proto3" json:"baseUrls,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Business_ShortLink) Reset() {
	*x = Business_ShortLink{}
	mi := &file_conf_conf_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Business_ShortLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Business_ShortLink) ProtoMessage() {}

func (x *Business_ShortLink) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Business_ShortLink.ProtoReflect.Descriptor instead.
func (*Business_ShortLink) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{3, 1}
}

func (x *Business_ShortLink) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Business_ShortLink) GetBaseUrls() []string {
	if x != nil {
		return x.BaseUrls
	}
	return nil
}

type Business_Wa struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ShortProject     string                 `protobuf:"bytes,1,opt,name=shortProject,proto3" json:"shortProject,omitempty"`
	ShortLinkApi     string                 `protobuf:"bytes,2,opt,name=shortLinkApi,proto3" json:"shortLinkApi,omitempty"`
	ShortLinkBaseUrl string                 `protobuf:"bytes,3,opt,name=shortLinkBaseUrl,proto3" json:"shortLinkBaseUrl,omitempty"`
	ShortLinkSignKey string                 `protobuf:"bytes,4,opt,name=shortLinkSignKey,proto3" json:"shortLinkSignKey,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Business_Wa) Reset() {
	*x = Business_Wa{}
	mi := &file_conf_conf_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Business_Wa) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Business_Wa) ProtoMessage() {}

func (x *Business_Wa) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Business_Wa.ProtoReflect.Descriptor instead.
func (*Business_Wa) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{3, 2}
}

func (x *Business_Wa) GetShortProject() string {
	if x != nil {
		return x.ShortProject
	}
	return ""
}

func (x *Business_Wa) GetShortLinkApi() string {
	if x != nil {
		return x.ShortLinkApi
	}
	return ""
}

func (x *Business_Wa) GetShortLinkBaseUrl() string {
	if x != nil {
		return x.ShortLinkBaseUrl
	}
	return ""
}

func (x *Business_Wa) GetShortLinkSignKey() string {
	if x != nil {
		return x.ShortLinkSignKey
	}
	return ""
}

type Business_HelpText struct {
	state         protoimpl.MessageState                    `protogen:"open.v1"`
	Id            string                                    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	BodyText      map[string]*Business_HelpTextBodyTextInfo `protobuf:"bytes,2,rep,name=bodyText,proto3" json:"bodyText,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Weight        int32                                     `protobuf:"varint,3,opt,name=weight,proto3" json:"weight,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Business_HelpText) Reset() {
	*x = Business_HelpText{}
	mi := &file_conf_conf_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Business_HelpText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Business_HelpText) ProtoMessage() {}

func (x *Business_HelpText) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Business_HelpText.ProtoReflect.Descriptor instead.
func (*Business_HelpText) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{3, 3}
}

func (x *Business_HelpText) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Business_HelpText) GetBodyText() map[string]*Business_HelpTextBodyTextInfo {
	if x != nil {
		return x.BodyText
	}
	return nil
}

func (x *Business_HelpText) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

type Business_StageInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HelpNum       int32                  `protobuf:"varint,1,opt,name=helpNum,proto3" json:"helpNum,omitempty"`
	AwardName     map[string]string      `protobuf:"bytes,2,rep,name=awardName,proto3" json:"awardName,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	AwardLink     map[string]string      `protobuf:"bytes,3,rep,name=awardLink,proto3" json:"awardLink,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Business_StageInfo) Reset() {
	*x = Business_StageInfo{}
	mi := &file_conf_conf_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Business_StageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Business_StageInfo) ProtoMessage() {}

func (x *Business_StageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Business_StageInfo.ProtoReflect.Descriptor instead.
func (*Business_StageInfo) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{3, 4}
}

func (x *Business_StageInfo) GetHelpNum() int32 {
	if x != nil {
		return x.HelpNum
	}
	return 0
}

func (x *Business_StageInfo) GetAwardName() map[string]string {
	if x != nil {
		return x.AwardName
	}
	return nil
}

func (x *Business_StageInfo) GetAwardLink() map[string]string {
	if x != nil {
		return x.AwardLink
	}
	return nil
}

type Business_S3Config struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PreSignUrl    string                 `protobuf:"bytes,1,opt,name=preSignUrl,proto3" json:"preSignUrl,omitempty"`
	Bucket        string                 `protobuf:"bytes,2,opt,name=bucket,proto3" json:"bucket,omitempty"`
	DonAmin       string                 `protobuf:"bytes,3,opt,name=donAmin,proto3" json:"donAmin,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Business_S3Config) Reset() {
	*x = Business_S3Config{}
	mi := &file_conf_conf_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Business_S3Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Business_S3Config) ProtoMessage() {}

func (x *Business_S3Config) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Business_S3Config.ProtoReflect.Descriptor instead.
func (*Business_S3Config) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{3, 5}
}

func (x *Business_S3Config) GetPreSignUrl() string {
	if x != nil {
		return x.PreSignUrl
	}
	return ""
}

func (x *Business_S3Config) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *Business_S3Config) GetDonAmin() string {
	if x != nil {
		return x.DonAmin
	}
	return ""
}

type Business_CDK struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	AlarmThreshold float64                `protobuf:"fixed64,1,opt,name=alarmThreshold,proto3" json:"alarmThreshold,omitempty"`
	V0             *Business_CDK_CDKType  `protobuf:"bytes,2,opt,name=v0,proto3" json:"v0,omitempty"`
	V3             *Business_CDK_CDKType  `protobuf:"bytes,3,opt,name=v3,proto3" json:"v3,omitempty"`
	V6             *Business_CDK_CDKType  `protobuf:"bytes,4,opt,name=v6,proto3" json:"v6,omitempty"`
	V9             *Business_CDK_CDKType  `protobuf:"bytes,5,opt,name=v9,proto3" json:"v9,omitempty"`
	V12            *Business_CDK_CDKType  `protobuf:"bytes,6,opt,name=v12,proto3" json:"v12,omitempty"`
	V15            *Business_CDK_CDKType  `protobuf:"bytes,7,opt,name=v15,proto3" json:"v15,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Business_CDK) Reset() {
	*x = Business_CDK{}
	mi := &file_conf_conf_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Business_CDK) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Business_CDK) ProtoMessage() {}

func (x *Business_CDK) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Business_CDK.ProtoReflect.Descriptor instead.
func (*Business_CDK) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{3, 6}
}

func (x *Business_CDK) GetAlarmThreshold() float64 {
	if x != nil {
		return x.AlarmThreshold
	}
	return 0
}

func (x *Business_CDK) GetV0() *Business_CDK_CDKType {
	if x != nil {
		return x.V0
	}
	return nil
}

func (x *Business_CDK) GetV3() *Business_CDK_CDKType {
	if x != nil {
		return x.V3
	}
	return nil
}

func (x *Business_CDK) GetV6() *Business_CDK_CDKType {
	if x != nil {
		return x.V6
	}
	return nil
}

func (x *Business_CDK) GetV9() *Business_CDK_CDKType {
	if x != nil {
		return x.V9
	}
	return nil
}

func (x *Business_CDK) GetV12() *Business_CDK_CDKType {
	if x != nil {
		return x.V12
	}
	return nil
}

func (x *Business_CDK) GetV15() *Business_CDK_CDKType {
	if x != nil {
		return x.V15
	}
	return nil
}

type Business_Statistics struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Email         *Business_Statistics_Email `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Business_Statistics) Reset() {
	*x = Business_Statistics{}
	mi := &file_conf_conf_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Business_Statistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Business_Statistics) ProtoMessage() {}

func (x *Business_Statistics) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Business_Statistics.ProtoReflect.Descriptor instead.
func (*Business_Statistics) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{3, 7}
}

func (x *Business_Statistics) GetEmail() *Business_Statistics_Email {
	if x != nil {
		return x.Email
	}
	return nil
}

type Business_HelpCode struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	CoroutineCount int32                  `protobuf:"varint,1,opt,name=coroutineCount,proto3" json:"coroutineCount,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Business_HelpCode) Reset() {
	*x = Business_HelpCode{}
	mi := &file_conf_conf_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Business_HelpCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Business_HelpCode) ProtoMessage() {}

func (x *Business_HelpCode) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Business_HelpCode.ProtoReflect.Descriptor instead.
func (*Business_HelpCode) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{3, 8}
}

func (x *Business_HelpCode) GetCoroutineCount() int32 {
	if x != nil {
		return x.CoroutineCount
	}
	return 0
}

type Business_Drainage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CountryCodes  []string               `protobuf:"bytes,1,rep,name=countryCodes,proto3" json:"countryCodes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Business_Drainage) Reset() {
	*x = Business_Drainage{}
	mi := &file_conf_conf_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Business_Drainage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Business_Drainage) ProtoMessage() {}

func (x *Business_Drainage) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Business_Drainage.ProtoReflect.Descriptor instead.
func (*Business_Drainage) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{3, 9}
}

func (x *Business_Drainage) GetCountryCodes() []string {
	if x != nil {
		return x.CountryCodes
	}
	return nil
}

type Business_HelpTextBodyTextInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	L01           string                 `protobuf:"bytes,1,opt,name=L01,proto3" json:"L01,omitempty"`
	L02           string                 `protobuf:"bytes,2,opt,name=L02,proto3" json:"L02,omitempty"`
	L03           string                 `protobuf:"bytes,3,opt,name=L03,proto3" json:"L03,omitempty"`
	L04           string                 `protobuf:"bytes,4,opt,name=L04,proto3" json:"L04,omitempty"`
	L05           string                 `protobuf:"bytes,5,opt,name=L05,proto3" json:"L05,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Business_HelpTextBodyTextInfo) Reset() {
	*x = Business_HelpTextBodyTextInfo{}
	mi := &file_conf_conf_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Business_HelpTextBodyTextInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Business_HelpTextBodyTextInfo) ProtoMessage() {}

func (x *Business_HelpTextBodyTextInfo) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Business_HelpTextBodyTextInfo.ProtoReflect.Descriptor instead.
func (*Business_HelpTextBodyTextInfo) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{3, 3, 1}
}

func (x *Business_HelpTextBodyTextInfo) GetL01() string {
	if x != nil {
		return x.L01
	}
	return ""
}

func (x *Business_HelpTextBodyTextInfo) GetL02() string {
	if x != nil {
		return x.L02
	}
	return ""
}

func (x *Business_HelpTextBodyTextInfo) GetL03() string {
	if x != nil {
		return x.L03
	}
	return ""
}

func (x *Business_HelpTextBodyTextInfo) GetL04() string {
	if x != nil {
		return x.L04
	}
	return ""
}

func (x *Business_HelpTextBodyTextInfo) GetL05() string {
	if x != nil {
		return x.L05
	}
	return ""
}

type Business_CDK_CDKType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Dir           string                 `protobuf:"bytes,1,opt,name=dir,proto3" json:"dir,omitempty"`
	QueueName     string                 `protobuf:"bytes,2,opt,name=queueName,proto3" json:"queueName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Business_CDK_CDKType) Reset() {
	*x = Business_CDK_CDKType{}
	mi := &file_conf_conf_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Business_CDK_CDKType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Business_CDK_CDKType) ProtoMessage() {}

func (x *Business_CDK_CDKType) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Business_CDK_CDKType.ProtoReflect.Descriptor instead.
func (*Business_CDK_CDKType) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{3, 6, 0}
}

func (x *Business_CDK_CDKType) GetDir() string {
	if x != nil {
		return x.Dir
	}
	return ""
}

func (x *Business_CDK_CDKType) GetQueueName() string {
	if x != nil {
		return x.QueueName
	}
	return ""
}

type Business_Statistics_Email struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Webhook       string                 `protobuf:"bytes,1,opt,name=webhook,proto3" json:"webhook,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Business_Statistics_Email) Reset() {
	*x = Business_Statistics_Email{}
	mi := &file_conf_conf_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Business_Statistics_Email) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Business_Statistics_Email) ProtoMessage() {}

func (x *Business_Statistics_Email) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Business_Statistics_Email.ProtoReflect.Descriptor instead.
func (*Business_Statistics_Email) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{3, 7, 0}
}

func (x *Business_Statistics_Email) GetWebhook() string {
	if x != nil {
		return x.Webhook
	}
	return ""
}

var File_conf_conf_proto protoreflect.FileDescriptor

var file_conf_conf_proto_rawDesc = string([]byte{
	0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0a, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa2, 0x02,
	0x0a, 0x09, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x12, 0x2a, 0x0a, 0x06, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6b, 0x72,
	0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52,
	0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a,
	0x08, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x08, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x12,
	0x39, 0x0a, 0x06, 0x4d, 0x73, 0x67, 0x4d, 0x61, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x6f, 0x6f,
	0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x2e, 0x4d, 0x73, 0x67, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x4d, 0x73, 0x67, 0x4d, 0x61, 0x70, 0x1a, 0x56, 0x0a, 0x0b, 0x4d, 0x73,
	0x67, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6b, 0x72, 0x61,
	0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x73, 0x67, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xe4, 0x03, 0x0a, 0x06, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x2b, 0x0a,
	0x04, 0x68, 0x74, 0x74, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6b, 0x72,
	0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x48, 0x54, 0x54, 0x50, 0x52, 0x04, 0x68, 0x74, 0x74, 0x70, 0x12, 0x2b, 0x0a, 0x04, 0x67, 0x72,
	0x70, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f,
	0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x52, 0x50,
	0x43, 0x52, 0x04, 0x67, 0x72, 0x70, 0x63, 0x12, 0x32, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x68,
	0x74, 0x74, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6b, 0x72, 0x61, 0x74,
	0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x54,
	0x54, 0x50, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x48, 0x74, 0x74, 0x70, 0x12, 0x3c, 0x0a, 0x0d, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x48, 0x74, 0x74, 0x70, 0x12, 0x38, 0x0a, 0x0b, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x48,
	0x74, 0x74, 0x70, 0x1a, 0x69, 0x0a, 0x04, 0x48, 0x54, 0x54, 0x50, 0x12, 0x18, 0x0a, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x1a, 0x69,
	0x0a, 0x04, 0x47, 0x52, 0x50, 0x43, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x61, 0x64, 0x64, 0x72, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0xd9, 0x1c, 0x0a, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52,
	0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x72, 0x65, 0x64,
	0x69, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f,
	0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73,
	0x52, 0x05, 0x72, 0x65, 0x64, 0x69, 0x73, 0x12, 0x36, 0x0a, 0x09, 0x63, 0x72, 0x6f, 0x6e, 0x5f,
	0x74, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x72, 0x61,
	0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x72, 0x6f,
	0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x08, 0x63, 0x72, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x2c, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x2f, 0x0a,
	0x06, 0x66, 0x65, 0x69, 0x73, 0x68, 0x75, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x46, 0x65, 0x69, 0x73, 0x68, 0x75, 0x52, 0x06, 0x66, 0x65, 0x69, 0x73, 0x68, 0x75, 0x12, 0x23,
	0x0a, 0x0d, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x23,
	0x0a, 0x02, 0x6e, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6b, 0x72, 0x61,
	0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4e, 0x78, 0x52,
	0x02, 0x6e, 0x78, 0x12, 0x26, 0x0a, 0x03, 0x72, 0x73, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x52, 0x73, 0x61, 0x52, 0x03, 0x72, 0x73, 0x61, 0x12, 0x5b, 0x0a, 0x13, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f,
	0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x13, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x49, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x4d, 0x73, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3e, 0x0a, 0x0b, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x70, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x49, 0x64, 0x6c, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x4f, 0x70, 0x65, 0x6e, 0x1a, 0xad, 0x02, 0x0a, 0x05, 0x52,
	0x65, 0x64, 0x69, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x12,
	0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64,
	0x64, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x6d, 0x61, 0x78, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6f,
	0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6f,
	0x6f, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x64,
	0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x6d, 0x69, 0x6e, 0x49, 0x64, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x73, 0x12, 0x3c, 0x0a, 0x0c,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x72,
	0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x3e, 0x0a, 0x0d, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x1a, 0x32, 0x0a, 0x04, 0x43, 0x72,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x1a, 0x89,
	0x0c, 0x0a, 0x08, 0x43, 0x72, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x3f, 0x0a, 0x10, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x6d, 0x73, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x52, 0x0e, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x74, 0x72, 0x79, 0x4d, 0x73, 0x67, 0x12, 0x34, 0x0a, 0x0a,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x52, 0x09, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x4d,
	0x73, 0x67, 0x12, 0x4b, 0x0a, 0x16, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x52, 0x14, 0x6f, 0x66, 0x66, 0x69, 0x63,
	0x69, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x12,
	0x4f, 0x0a, 0x18, 0x75, 0x6e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x52, 0x16, 0x75, 0x6e, 0x6f, 0x66, 0x66, 0x69,
	0x63, 0x69, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x12, 0x45, 0x0a, 0x13, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x43, 0x72, 0x6f, 0x6e, 0x52, 0x11, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x4a, 0x0a, 0x16, 0x63, 0x61, 0x6c, 0x6c, 0x5f,
	0x6d, 0x73, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x52, 0x13,
	0x63, 0x61, 0x6c, 0x6c, 0x4d, 0x73, 0x67, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x12, 0x4a, 0x0a, 0x16, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x75, 0x74, 0x63, 0x38, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x52, 0x13, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x74, 0x63, 0x38, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x4a, 0x0a, 0x16, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x75, 0x74, 0x63, 0x30, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x52, 0x13, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x55, 0x74, 0x63, 0x30, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x55, 0x0a, 0x1c, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x75, 0x74, 0x63, 0x5f,
	0x6d, 0x69, 0x6e, 0x75, 0x73, 0x38, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x52, 0x18, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x74, 0x63, 0x4d, 0x69, 0x6e, 0x75, 0x73, 0x38, 0x54, 0x61,
	0x73, 0x6b, 0x12, 0x43, 0x0a, 0x12, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x6f, 0x66, 0x66, 0x69,
	0x63, 0x69, 0x61, 0x6c, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x52, 0x10, 0x72, 0x65, 0x74, 0x72, 0x79, 0x4f, 0x66, 0x66, 0x69,
	0x63, 0x69, 0x61, 0x6c, 0x4d, 0x73, 0x67, 0x12, 0x47, 0x0a, 0x14, 0x72, 0x65, 0x74, 0x72, 0x79,
	0x5f, 0x75, 0x6e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x6d, 0x73, 0x67, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x52, 0x12, 0x72, 0x65,
	0x74, 0x72, 0x79, 0x55, 0x6e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x4d, 0x73, 0x67,
	0x12, 0x4e, 0x0a, 0x18, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x52, 0x15, 0x72, 0x65, 0x74, 0x72, 0x79,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x3a, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x61, 0x73,
	0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x52, 0x0c,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x43, 0x0a, 0x12,
	0x66, 0x65, 0x69, 0x73, 0x68, 0x75, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x61,
	0x73, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f,
	0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x52,
	0x10, 0x66, 0x65, 0x69, 0x73, 0x68, 0x75, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x73,
	0x6b, 0x12, 0x46, 0x0a, 0x14, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64,
	0x5f, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x63, 0x64, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x52, 0x11, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x69,
	0x6e, 0x64, 0x46, 0x72, 0x65, 0x65, 0x43, 0x64, 0x6b, 0x12, 0x3d, 0x0a, 0x0f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x5f, 0x76, 0x32, 0x32, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x6d, 0x69, 0x6e, 0x64, 0x56, 0x32, 0x32, 0x12, 0x3b, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x5f, 0x76, 0x33, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x6d,
	0x69, 0x6e, 0x64, 0x56, 0x33, 0x12, 0x3f, 0x0a, 0x10, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x31, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x52, 0x0e, 0x70, 0x75, 0x73, 0x68, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x31, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x3f, 0x0a, 0x10, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x32, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x52, 0x0e, 0x70, 0x75, 0x73, 0x68, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x32, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x3f, 0x0a, 0x10, 0x70, 0x75, 0x73, 0x68, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x33, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x52, 0x0e, 0x70, 0x75, 0x73, 0x68, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x33, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x3f, 0x0a, 0x10, 0x70, 0x75, 0x73, 0x68,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x34, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x52, 0x0e, 0x70, 0x75, 0x73, 0x68, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x34, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x3f, 0x0a, 0x10, 0x67, 0x77, 0x5f,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x52, 0x0e, 0x67, 0x77, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x1a, 0xfd, 0x01, 0x0a, 0x05, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x66, 0x66, 0x69,
	0x63, 0x69, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x6e, 0x6f, 0x66, 0x66,
	0x69, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x75, 0x6e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x4d, 0x73, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x63,
	0x61, 0x6c, 0x6c, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x61, 0x6c, 0x6c, 0x4d, 0x73, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x5f, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x48, 0x65, 0x6c, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x0e,
	0x0a, 0x02, 0x67, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x67, 0x77, 0x12, 0x1b,
	0x0a, 0x09, 0x67, 0x77, 0x5f, 0x72, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x67, 0x77, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x67,
	0x77, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x67, 0x77, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x1a, 0x4b, 0x0a, 0x06, 0x46, 0x65,
	0x69, 0x73, 0x68, 0x75, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x27,
	0x0a, 0x0f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x5f, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x1a, 0x24, 0x0a, 0x09, 0x4a, 0x6f, 0x69, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x1a, 0x86, 0x01,
	0x0a, 0x02, 0x4e, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x61, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x61, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x73, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x69,
	0x67, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x1a, 0x43, 0x0a, 0x03, 0x52, 0x73, 0x61, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x1a, 0xb5, 0x01, 0x0a, 0x0d,
	0x4d, 0x73, 0x67, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a,
	0x14, 0x75, 0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x75, 0x73, 0x65,
	0x72, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x3e, 0x0a, 0x1a, 0x75, 0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x4f,
	0x66, 0x48, 0x65, 0x6c, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1a, 0x75, 0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x65, 0x6e,
	0x64, 0x4f, 0x66, 0x48, 0x65, 0x6c, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x30, 0x0a, 0x13, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x46, 0x72, 0x65, 0x65, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13,
	0x72, 0x65, 0x6e, 0x65, 0x77, 0x46, 0x72, 0x65, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c,
	0x69, 0x73, 0x74, 0x1a, 0xc7, 0x01, 0x0a, 0x0b, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x6f, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48,
	0x6f, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x72,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x55, 0x73, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x69, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d,
	0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x66, 0x0a,
	0x18, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4d, 0x73, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6b, 0x72, 0x61,
	0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x73, 0x67,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd6, 0x1a, 0x0a, 0x08, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x12, 0x39, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x3c, 0x0a,
	0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x6b,
	0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x39, 0x0a, 0x08, 0x73,
	0x33, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x2e, 0x53, 0x33, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x08, 0x73, 0x33,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2a, 0x0a, 0x03, 0x63, 0x64, 0x6b, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x43, 0x44, 0x4b, 0x52, 0x03, 0x63,
	0x64, 0x6b, 0x12, 0x39, 0x0a, 0x08, 0x68, 0x65, 0x6c, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x48, 0x65, 0x6c, 0x70, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x08, 0x68, 0x65, 0x6c, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3f, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x3d,
	0x0a, 0x0a, 0x70, 0x75, 0x73, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x31, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x44, 0x72, 0x61, 0x69, 0x6e, 0x61, 0x67,
	0x65, 0x52, 0x0a, 0x70, 0x75, 0x73, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x31, 0x12, 0x3d, 0x0a,
	0x0a, 0x70, 0x75, 0x73, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x32, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x44, 0x72, 0x61, 0x69, 0x6e, 0x61, 0x67, 0x65,
	0x52, 0x0a, 0x70, 0x75, 0x73, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x32, 0x12, 0x3d, 0x0a, 0x0a,
	0x70, 0x75, 0x73, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x33, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x44, 0x72, 0x61, 0x69, 0x6e, 0x61, 0x67, 0x65, 0x52,
	0x0a, 0x70, 0x75, 0x73, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x33, 0x1a, 0xf0, 0x09, 0x0a, 0x08,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x65, 0x65, 0x64, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6e, 0x65, 0x65, 0x64, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x12, 0x3e, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x3b, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x44, 0x65,
	0x73, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x4a, 0x0a,
	0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x4d, 0x0a, 0x0a, 0x73, 0x68, 0x6f,
	0x77, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x53, 0x68, 0x6f,
	0x77, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x73, 0x68,
	0x6f, 0x77, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x41, 0x0a, 0x0c, 0x68, 0x65, 0x6c, 0x70,
	0x54, 0x65, 0x78, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x2e, 0x48, 0x65, 0x6c, 0x70, 0x54, 0x65, 0x78, 0x74, 0x52, 0x0c, 0x68,
	0x65, 0x6c, 0x70, 0x54, 0x65, 0x78, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0e, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x41, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x41, 0x77, 0x61, 0x72, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x77, 0x61, 0x49, 0x64, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x77, 0x61, 0x49,
	0x64, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x77,
	0x61, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x77, 0x61, 0x52, 0x65, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12,
	0x27, 0x0a, 0x02, 0x77, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6b, 0x72,
	0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x2e, 0x57, 0x61, 0x52, 0x02, 0x77, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x0b,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x18, 0x0f, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0b, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x10, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x4d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x18, 0x11,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x1a,
	0x38, 0x0a, 0x0a, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x37, 0x0a, 0x09, 0x44, 0x65, 0x73,
	0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x3d, 0x0a, 0x0f, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x3e, 0x0a, 0x10, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x3d, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d,
	0x0a, 0x09, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x73, 0x1a, 0xa4, 0x01,
	0x0a, 0x02, 0x57, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x41, 0x70, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x41, 0x70, 0x69, 0x12, 0x2a, 0x0a, 0x10,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x42, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e,
	0x6b, 0x42, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x69, 0x67,
	0x6e, 0x4b, 0x65, 0x79, 0x1a, 0xce, 0x02, 0x0a, 0x08, 0x48, 0x65, 0x6c, 0x70, 0x54, 0x65, 0x78,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x47, 0x0a, 0x08, 0x62, 0x6f, 0x64, 0x79, 0x54, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x48, 0x65, 0x6c, 0x70, 0x54, 0x65,
	0x78, 0x74, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x54, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x62, 0x6f, 0x64, 0x79, 0x54, 0x65, 0x78, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x1a, 0x67, 0x0a, 0x0d, 0x42, 0x6f, 0x64, 0x79, 0x54, 0x65, 0x78, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x40, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x48, 0x65, 0x6c, 0x70, 0x54,
	0x65, 0x78, 0x74, 0x2e, 0x62, 0x6f, 0x64, 0x79, 0x54, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x68, 0x0a, 0x0c, 0x62,
	0x6f, 0x64, 0x79, 0x54, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x4c,
	0x30, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4c, 0x30, 0x31, 0x12, 0x10, 0x0a,
	0x03, 0x4c, 0x30, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4c, 0x30, 0x32, 0x12,
	0x10, 0x0a, 0x03, 0x4c, 0x30, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4c, 0x30,
	0x33, 0x12, 0x10, 0x0a, 0x03, 0x4c, 0x30, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x4c, 0x30, 0x34, 0x12, 0x10, 0x0a, 0x03, 0x4c, 0x30, 0x35, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x4c, 0x30, 0x35, 0x1a, 0xbb, 0x02, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x6c, 0x70, 0x4e, 0x75, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x68, 0x65, 0x6c, 0x70, 0x4e, 0x75, 0x6d, 0x12, 0x4b, 0x0a,
	0x09, 0x61, 0x77, 0x61, 0x72, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x41, 0x77, 0x61, 0x72, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x09, 0x61, 0x77, 0x61, 0x72, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x09, 0x61, 0x77,
	0x61, 0x72, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x41, 0x77,
	0x61, 0x72, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x61, 0x77,
	0x61, 0x72, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x1a, 0x3c, 0x0a, 0x0e, 0x41, 0x77, 0x61, 0x72, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x41, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69,
	0x6e, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x5c, 0x0a, 0x08, 0x53, 0x33, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x72, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f, 0x6e, 0x41, 0x6d,
	0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6f, 0x6e, 0x41, 0x6d, 0x69,
	0x6e, 0x1a, 0x98, 0x03, 0x0a, 0x03, 0x43, 0x44, 0x4b, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x6c, 0x61,
	0x72, 0x6d, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0e, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x12, 0x30, 0x0a, 0x02, 0x76, 0x30, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x2e, 0x43, 0x44, 0x4b, 0x2e, 0x43, 0x44, 0x4b, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x02, 0x76, 0x30, 0x12, 0x30, 0x0a, 0x02, 0x76, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x43, 0x44, 0x4b, 0x2e, 0x43, 0x44, 0x4b, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x02, 0x76, 0x33, 0x12, 0x30, 0x0a, 0x02, 0x76, 0x36, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x43, 0x44, 0x4b, 0x2e, 0x43, 0x44, 0x4b, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x02, 0x76, 0x36, 0x12, 0x30, 0x0a, 0x02, 0x76, 0x39, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x43, 0x44, 0x4b, 0x2e, 0x43, 0x44,
	0x4b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x02, 0x76, 0x39, 0x12, 0x32, 0x0a, 0x03, 0x76, 0x31, 0x32,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x43, 0x44, 0x4b,
	0x2e, 0x43, 0x44, 0x4b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x03, 0x76, 0x31, 0x32, 0x12, 0x32, 0x0a,
	0x03, 0x76, 0x31, 0x35, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6b, 0x72, 0x61,
	0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x2e, 0x43, 0x44, 0x4b, 0x2e, 0x43, 0x44, 0x4b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x03, 0x76, 0x31,
	0x35, 0x1a, 0x39, 0x0a, 0x07, 0x43, 0x44, 0x4b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x64, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x69, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x6c, 0x0a, 0x0a,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x3b, 0x0a, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6b, 0x72, 0x61, 0x74,
	0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x1a, 0x21, 0x0a, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x18, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x1a, 0x32, 0x0a, 0x08, 0x48, 0x65,
	0x6c, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x63, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x2e,
	0x0a, 0x08, 0x44, 0x72, 0x61, 0x69, 0x6e, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x22, 0xaa,
	0x05, 0x0a, 0x0f, 0x4d, 0x73, 0x67, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x36, 0x0a, 0x03, 0x4c, 0x30, 0x31, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x73, 0x67,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4c, 0x30, 0x31,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x4c, 0x30, 0x31, 0x12, 0x36, 0x0a, 0x03, 0x4c, 0x30,
	0x32, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x73, 0x67, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4c, 0x30, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x4c,
	0x30, 0x32, 0x12, 0x36, 0x0a, 0x03, 0x4c, 0x30, 0x33, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x73, 0x67,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4c, 0x30, 0x33,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x4c, 0x30, 0x33, 0x12, 0x36, 0x0a, 0x03, 0x4c, 0x30,
	0x34, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x73, 0x67, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4c, 0x30, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x4c,
	0x30, 0x34, 0x12, 0x36, 0x0a, 0x03, 0x4c, 0x30, 0x35, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x73, 0x67,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4c, 0x30, 0x35,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x4c, 0x30, 0x35, 0x1a, 0x4b, 0x0a, 0x08, 0x4c, 0x30,
	0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x73, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4b, 0x0a, 0x08, 0x4c, 0x30, 0x32, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4d, 0x73, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4b, 0x0a, 0x08, 0x4c, 0x30, 0x33, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d,
	0x73, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x4b, 0x0a, 0x08, 0x4c, 0x30, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x73, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4b,
	0x0a, 0x08, 0x4c, 0x30, 0x35, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6b, 0x72,
	0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x73, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa2, 0x01, 0x0a, 0x07,
	0x4d, 0x73, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6b,
	0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x22, 0x48, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x0b, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x1a, 0x0a, 0x08,
	0x62, 0x6f, 0x64, 0x79, 0x54, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x62, 0x6f, 0x64, 0x79, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6f, 0x6f, 0x74,
	0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6f,
	0x6f, 0x74, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x12, 0x2a, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f,
	0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x88, 0x01, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x65, 0x78, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x65, 0x78,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x6b,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e,
	0x6b, 0x12, 0x2c, 0x0a, 0x07, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x07, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73, 0x22,
	0x45, 0x0a, 0x06, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a,
	0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b,
	0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52,
	0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2d, 0x0a, 0x05, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x08, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f,
	0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4e, 0x78, 0x52, 0x65, 0x71, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6b, 0x72, 0x61, 0x74,
	0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4e, 0x78, 0x52, 0x65, 0x71, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x43, 0x0a, 0x15, 0x4e, 0x78, 0x52,
	0x65, 0x71, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xa9,
	0x01, 0x0a, 0x16, 0x4e, 0x78, 0x52, 0x65, 0x71, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a,
	0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4e,
	0x78, 0x52, 0x65, 0x71, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x0a,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x88, 0x01, 0x0a, 0x1f, 0x4e,
	0x78, 0x52, 0x65, 0x71, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x3d, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4e, 0x78, 0x52, 0x65, 0x71, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x2d, 0x0a, 0x1b, 0x4e, 0x78, 0x52, 0x65, 0x71, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x42, 0x22, 0x5a, 0x20, 0x66, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2d,
	0x62, 0x61, 0x73, 0x69, 0x63, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x3b, 0x63, 0x6f, 0x6e, 0x66, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_conf_conf_proto_rawDescOnce sync.Once
	file_conf_conf_proto_rawDescData []byte
)

func file_conf_conf_proto_rawDescGZIP() []byte {
	file_conf_conf_proto_rawDescOnce.Do(func() {
		file_conf_conf_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_conf_conf_proto_rawDesc), len(file_conf_conf_proto_rawDesc)))
	})
	return file_conf_conf_proto_rawDescData
}

var file_conf_conf_proto_msgTypes = make([]protoimpl.MessageInfo, 58)
var file_conf_conf_proto_goTypes = []any{
	(*Bootstrap)(nil),                       // 0: kratos.api.Bootstrap
	(*Server)(nil),                          // 1: kratos.api.Server
	(*Data)(nil),                            // 2: kratos.api.Data
	(*Business)(nil),                        // 3: kratos.api.Business
	(*MsgLanguageInfo)(nil),                 // 4: kratos.api.MsgLanguageInfo
	(*MsgInfo)(nil),                         // 5: kratos.api.MsgInfo
	(*Params)(nil),                          // 6: kratos.api.Params
	(*Interactive)(nil),                     // 7: kratos.api.Interactive
	(*Action)(nil),                          // 8: kratos.api.Action
	(*Button)(nil),                          // 9: kratos.api.Button
	(*Reply)(nil),                           // 10: kratos.api.Reply
	(*Template)(nil),                        // 11: kratos.api.Template
	(*NxReqTemplateLanguage)(nil),           // 12: kratos.api.NxReqTemplateLanguage
	(*NxReqTemplateComponent)(nil),          // 13: kratos.api.NxReqTemplateComponent
	(*NxReqTemplateComponentParameter)(nil), // 14: kratos.api.NxReqTemplateComponentParameter
	(*NxReqTemplateComponentImage)(nil),     // 15: kratos.api.NxReqTemplateComponentImage
	nil,                                     // 16: kratos.api.Bootstrap.MsgMapEntry
	(*Server_HTTP)(nil),                     // 17: kratos.api.Server.HTTP
	(*Server_GRPC)(nil),                     // 18: kratos.api.Server.GRPC
	(*Data_Database)(nil),                   // 19: kratos.api.Data.Database
	(*Data_Redis)(nil),                      // 20: kratos.api.Data.Redis
	(*Data_Cron)(nil),                       // 21: kratos.api.Data.Cron
	(*Data_CronTask)(nil),                   // 22: kratos.api.Data.CronTask
	(*Data_Queue)(nil),                      // 23: kratos.api.Data.Queue
	(*Data_Feishu)(nil),                     // 24: kratos.api.Data.Feishu
	(*Data_JoinGroup)(nil),                  // 25: kratos.api.Data.JoinGroup
	(*Data_Nx)(nil),                         // 26: kratos.api.Data.Nx
	(*Data_Rsa)(nil),                        // 27: kratos.api.Data.Rsa
	(*Data_MsgPrefixInfo)(nil),              // 28: kratos.api.Data.MsgPrefixInfo
	(*Data_EmailConfig)(nil),                // 29: kratos.api.Data.EmailConfig
	nil,                                     // 30: kratos.api.Data.MethodInsertMsgInfoEntry
	(*Business_Activity)(nil),               // 31: kratos.api.Business.Activity
	(*Business_ShortLink)(nil),              // 32: kratos.api.Business.ShortLink
	(*Business_Wa)(nil),                     // 33: kratos.api.Business.Wa
	(*Business_HelpText)(nil),               // 34: kratos.api.Business.HelpText
	(*Business_StageInfo)(nil),              // 35: kratos.api.Business.StageInfo
	(*Business_S3Config)(nil),               // 36: kratos.api.Business.S3Config
	(*Business_CDK)(nil),                    // 37: kratos.api.Business.CDK
	(*Business_Statistics)(nil),             // 38: kratos.api.Business.Statistics
	(*Business_HelpCode)(nil),               // 39: kratos.api.Business.HelpCode
	(*Business_Drainage)(nil),               // 40: kratos.api.Business.Drainage
	nil,                                     // 41: kratos.api.Business.Activity.TitleEntry
	nil,                                     // 42: kratos.api.Business.Activity.DescEntry
	nil,                                     // 43: kratos.api.Business.Activity.ImageLinkEntry
	nil,                                     // 44: kratos.api.Business.Activity.ShowDomainEntry
	nil,                                     // 45: kratos.api.Business.Activity.LanguageMapEntry
	nil,                                     // 46: kratos.api.Business.Activity.ChannelMapEntry
	nil,                                     // 47: kratos.api.Business.HelpText.BodyTextEntry
	(*Business_HelpTextBodyTextInfo)(nil),   // 48: kratos.api.Business.HelpText.bodyTextInfo
	nil,                                     // 49: kratos.api.Business.StageInfo.AwardNameEntry
	nil,                                     // 50: kratos.api.Business.StageInfo.AwardLinkEntry
	(*Business_CDK_CDKType)(nil),            // 51: kratos.api.Business.CDK.CDKType
	(*Business_Statistics_Email)(nil),       // 52: kratos.api.Business.Statistics.Email
	nil,                                     // 53: kratos.api.MsgLanguageInfo.L01Entry
	nil,                                     // 54: kratos.api.MsgLanguageInfo.L02Entry
	nil,                                     // 55: kratos.api.MsgLanguageInfo.L03Entry
	nil,                                     // 56: kratos.api.MsgLanguageInfo.L04Entry
	nil,                                     // 57: kratos.api.MsgLanguageInfo.L05Entry
	(*durationpb.Duration)(nil),             // 58: google.protobuf.Duration
}
var file_conf_conf_proto_depIdxs = []int32{
	1,  // 0: kratos.api.Bootstrap.server:type_name -> kratos.api.Server
	2,  // 1: kratos.api.Bootstrap.data:type_name -> kratos.api.Data
	3,  // 2: kratos.api.Bootstrap.business:type_name -> kratos.api.Business
	16, // 3: kratos.api.Bootstrap.MsgMap:type_name -> kratos.api.Bootstrap.MsgMapEntry
	17, // 4: kratos.api.Server.http:type_name -> kratos.api.Server.HTTP
	18, // 5: kratos.api.Server.grpc:type_name -> kratos.api.Server.GRPC
	17, // 6: kratos.api.Server.job_http:type_name -> kratos.api.Server.HTTP
	17, // 7: kratos.api.Server.consumer_http:type_name -> kratos.api.Server.HTTP
	17, // 8: kratos.api.Server.static_http:type_name -> kratos.api.Server.HTTP
	19, // 9: kratos.api.Data.database:type_name -> kratos.api.Data.Database
	20, // 10: kratos.api.Data.redis:type_name -> kratos.api.Data.Redis
	22, // 11: kratos.api.Data.cron_task:type_name -> kratos.api.Data.CronTask
	23, // 12: kratos.api.Data.queue:type_name -> kratos.api.Data.Queue
	24, // 13: kratos.api.Data.feishu:type_name -> kratos.api.Data.Feishu
	25, // 14: kratos.api.Data.join_group:type_name -> kratos.api.Data.JoinGroup
	26, // 15: kratos.api.Data.nx:type_name -> kratos.api.Data.Nx
	27, // 16: kratos.api.Data.rsa:type_name -> kratos.api.Data.Rsa
	30, // 17: kratos.api.Data.methodInsertMsgInfo:type_name -> kratos.api.Data.MethodInsertMsgInfoEntry
	29, // 18: kratos.api.Data.emailConfig:type_name -> kratos.api.Data.EmailConfig
	31, // 19: kratos.api.Business.activity:type_name -> kratos.api.Business.Activity
	32, // 20: kratos.api.Business.shortLink:type_name -> kratos.api.Business.ShortLink
	36, // 21: kratos.api.Business.s3Config:type_name -> kratos.api.Business.S3Config
	37, // 22: kratos.api.Business.cdk:type_name -> kratos.api.Business.CDK
	39, // 23: kratos.api.Business.helpCode:type_name -> kratos.api.Business.HelpCode
	38, // 24: kratos.api.Business.statistics:type_name -> kratos.api.Business.Statistics
	40, // 25: kratos.api.Business.pushEvent1:type_name -> kratos.api.Business.Drainage
	40, // 26: kratos.api.Business.pushEvent2:type_name -> kratos.api.Business.Drainage
	40, // 27: kratos.api.Business.pushEvent3:type_name -> kratos.api.Business.Drainage
	53, // 28: kratos.api.MsgLanguageInfo.L01:type_name -> kratos.api.MsgLanguageInfo.L01Entry
	54, // 29: kratos.api.MsgLanguageInfo.L02:type_name -> kratos.api.MsgLanguageInfo.L02Entry
	55, // 30: kratos.api.MsgLanguageInfo.L03:type_name -> kratos.api.MsgLanguageInfo.L03Entry
	56, // 31: kratos.api.MsgLanguageInfo.L04:type_name -> kratos.api.MsgLanguageInfo.L04Entry
	57, // 32: kratos.api.MsgLanguageInfo.L05:type_name -> kratos.api.MsgLanguageInfo.L05Entry
	7,  // 33: kratos.api.MsgInfo.interactive:type_name -> kratos.api.Interactive
	11, // 34: kratos.api.MsgInfo.template:type_name -> kratos.api.Template
	6,  // 35: kratos.api.MsgInfo.params:type_name -> kratos.api.Params
	8,  // 36: kratos.api.Interactive.action:type_name -> kratos.api.Action
	9,  // 37: kratos.api.Action.buttons:type_name -> kratos.api.Button
	10, // 38: kratos.api.Button.reply:type_name -> kratos.api.Reply
	12, // 39: kratos.api.Template.language:type_name -> kratos.api.NxReqTemplateLanguage
	13, // 40: kratos.api.Template.components:type_name -> kratos.api.NxReqTemplateComponent
	14, // 41: kratos.api.NxReqTemplateComponent.parameters:type_name -> kratos.api.NxReqTemplateComponentParameter
	15, // 42: kratos.api.NxReqTemplateComponentParameter.image:type_name -> kratos.api.NxReqTemplateComponentImage
	4,  // 43: kratos.api.Bootstrap.MsgMapEntry.value:type_name -> kratos.api.MsgLanguageInfo
	58, // 44: kratos.api.Server.HTTP.timeout:type_name -> google.protobuf.Duration
	58, // 45: kratos.api.Server.GRPC.timeout:type_name -> google.protobuf.Duration
	58, // 46: kratos.api.Data.Redis.read_timeout:type_name -> google.protobuf.Duration
	58, // 47: kratos.api.Data.Redis.write_timeout:type_name -> google.protobuf.Duration
	21, // 48: kratos.api.Data.CronTask.resend_retry_msg:type_name -> kratos.api.Data.Cron
	21, // 49: kratos.api.Data.CronTask.resend_msg:type_name -> kratos.api.Data.Cron
	21, // 50: kratos.api.Data.CronTask.official_queue_monitor:type_name -> kratos.api.Data.Cron
	21, // 51: kratos.api.Data.CronTask.unofficial_queue_monitor:type_name -> kratos.api.Data.Cron
	21, // 52: kratos.api.Data.CronTask.renew_queue_monitor:type_name -> kratos.api.Data.Cron
	21, // 53: kratos.api.Data.CronTask.call_msg_queue_monitor:type_name -> kratos.api.Data.Cron
	21, // 54: kratos.api.Data.CronTask.email_report_utc8_task:type_name -> kratos.api.Data.Cron
	21, // 55: kratos.api.Data.CronTask.email_report_utc0_task:type_name -> kratos.api.Data.Cron
	21, // 56: kratos.api.Data.CronTask.email_report_utc_minus8_task:type_name -> kratos.api.Data.Cron
	21, // 57: kratos.api.Data.CronTask.retry_official_msg:type_name -> kratos.api.Data.Cron
	21, // 58: kratos.api.Data.CronTask.retry_unofficial_msg:type_name -> kratos.api.Data.Cron
	21, // 59: kratos.api.Data.CronTask.retry_receipt_msg_record:type_name -> kratos.api.Data.Cron
	21, // 60: kratos.api.Data.CronTask.activity_task:type_name -> kratos.api.Data.Cron
	21, // 61: kratos.api.Data.CronTask.feishu_report_task:type_name -> kratos.api.Data.Cron
	21, // 62: kratos.api.Data.CronTask.user_remind_free_cdk:type_name -> kratos.api.Data.Cron
	21, // 63: kratos.api.Data.CronTask.user_remind_v22:type_name -> kratos.api.Data.Cron
	21, // 64: kratos.api.Data.CronTask.user_remind_v3:type_name -> kratos.api.Data.Cron
	21, // 65: kratos.api.Data.CronTask.push_event1_send:type_name -> kratos.api.Data.Cron
	21, // 66: kratos.api.Data.CronTask.push_event2_send:type_name -> kratos.api.Data.Cron
	21, // 67: kratos.api.Data.CronTask.push_event3_send:type_name -> kratos.api.Data.Cron
	21, // 68: kratos.api.Data.CronTask.push_event4_send:type_name -> kratos.api.Data.Cron
	21, // 69: kratos.api.Data.CronTask.gw_queue_monitor:type_name -> kratos.api.Data.Cron
	28, // 70: kratos.api.Data.MethodInsertMsgInfoEntry.value:type_name -> kratos.api.Data.MsgPrefixInfo
	41, // 71: kratos.api.Business.Activity.title:type_name -> kratos.api.Business.Activity.TitleEntry
	42, // 72: kratos.api.Business.Activity.desc:type_name -> kratos.api.Business.Activity.DescEntry
	43, // 73: kratos.api.Business.Activity.imageLink:type_name -> kratos.api.Business.Activity.ImageLinkEntry
	44, // 74: kratos.api.Business.Activity.showDomain:type_name -> kratos.api.Business.Activity.ShowDomainEntry
	34, // 75: kratos.api.Business.Activity.helpTextList:type_name -> kratos.api.Business.HelpText
	35, // 76: kratos.api.Business.Activity.stageAwardList:type_name -> kratos.api.Business.StageInfo
	33, // 77: kratos.api.Business.Activity.wa:type_name -> kratos.api.Business.Wa
	45, // 78: kratos.api.Business.Activity.languageMap:type_name -> kratos.api.Business.Activity.LanguageMapEntry
	46, // 79: kratos.api.Business.Activity.channelMap:type_name -> kratos.api.Business.Activity.ChannelMapEntry
	47, // 80: kratos.api.Business.HelpText.bodyText:type_name -> kratos.api.Business.HelpText.BodyTextEntry
	49, // 81: kratos.api.Business.StageInfo.awardName:type_name -> kratos.api.Business.StageInfo.AwardNameEntry
	50, // 82: kratos.api.Business.StageInfo.awardLink:type_name -> kratos.api.Business.StageInfo.AwardLinkEntry
	51, // 83: kratos.api.Business.CDK.v0:type_name -> kratos.api.Business.CDK.CDKType
	51, // 84: kratos.api.Business.CDK.v3:type_name -> kratos.api.Business.CDK.CDKType
	51, // 85: kratos.api.Business.CDK.v6:type_name -> kratos.api.Business.CDK.CDKType
	51, // 86: kratos.api.Business.CDK.v9:type_name -> kratos.api.Business.CDK.CDKType
	51, // 87: kratos.api.Business.CDK.v12:type_name -> kratos.api.Business.CDK.CDKType
	51, // 88: kratos.api.Business.CDK.v15:type_name -> kratos.api.Business.CDK.CDKType
	52, // 89: kratos.api.Business.Statistics.email:type_name -> kratos.api.Business.Statistics.Email
	48, // 90: kratos.api.Business.HelpText.BodyTextEntry.value:type_name -> kratos.api.Business.HelpText.bodyTextInfo
	5,  // 91: kratos.api.MsgLanguageInfo.L01Entry.value:type_name -> kratos.api.MsgInfo
	5,  // 92: kratos.api.MsgLanguageInfo.L02Entry.value:type_name -> kratos.api.MsgInfo
	5,  // 93: kratos.api.MsgLanguageInfo.L03Entry.value:type_name -> kratos.api.MsgInfo
	5,  // 94: kratos.api.MsgLanguageInfo.L04Entry.value:type_name -> kratos.api.MsgInfo
	5,  // 95: kratos.api.MsgLanguageInfo.L05Entry.value:type_name -> kratos.api.MsgInfo
	96, // [96:96] is the sub-list for method output_type
	96, // [96:96] is the sub-list for method input_type
	96, // [96:96] is the sub-list for extension type_name
	96, // [96:96] is the sub-list for extension extendee
	0,  // [0:96] is the sub-list for field type_name
}

func init() { file_conf_conf_proto_init() }
func file_conf_conf_proto_init() {
	if File_conf_conf_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_conf_conf_proto_rawDesc), len(file_conf_conf_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   58,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_conf_conf_proto_goTypes,
		DependencyIndexes: file_conf_conf_proto_depIdxs,
		MessageInfos:      file_conf_conf_proto_msgTypes,
	}.Build()
	File_conf_conf_proto = out.File
	file_conf_conf_proto_goTypes = nil
	file_conf_conf_proto_depIdxs = nil
}
